
SPI_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005224  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080053ac  080053ac  000153ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b0  080054b0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054b8  080054b8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054b8  080054b8  000154b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054bc  080054bc  000154bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080054c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00003120  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200031a4  200031a4  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a061  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c59  00000000  00000000  0002a115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  0002bd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000858  00000000  00000000  0002c6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000214bf  00000000  00000000  0002cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d701  00000000  00000000  0004e3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2b8f  00000000  00000000  0005bad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e667  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002484  00000000  00000000  0011e6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005394 	.word	0x08005394

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08005394 	.word	0x08005394

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fba3 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f873 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f911 	bl	8000700 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004de:	f000 f8d9 	bl	8000694 <MX_SPI1_Init>
  MX_FATFS_Init();
 80004e2:	f001 fe27 	bl	8002134 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80004e6:	2064      	movs	r0, #100	; 0x64
 80004e8:	f000 fc0a 	bl	8000d00 <HAL_Delay>

  //format drive
  fres = f_mkfs("", FM_ANY, 0, buffer, sizeof(buffer));
 80004ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	4b2a      	ldr	r3, [pc, #168]	; (800059c <main+0xd0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	2107      	movs	r1, #7
 80004f8:	4829      	ldr	r0, [pc, #164]	; (80005a0 <main+0xd4>)
 80004fa:	f004 fa73 	bl	80049e4 <f_mkfs>
 80004fe:	4603      	mov	r3, r0
 8000500:	461a      	mov	r2, r3
 8000502:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <main+0xd8>)
 8000504:	701a      	strb	r2, [r3, #0]

  FATFS_LinkDriver(&USER_Driver, SFLASHPath);
 8000506:	4928      	ldr	r1, [pc, #160]	; (80005a8 <main+0xdc>)
 8000508:	4828      	ldr	r0, [pc, #160]	; (80005ac <main+0xe0>)
 800050a:	f004 ff07 	bl	800531c <FATFS_LinkDriver>

  //mount device

  fres = f_mount(&FatFs, &SFLASHPath, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	4925      	ldr	r1, [pc, #148]	; (80005a8 <main+0xdc>)
 8000512:	4827      	ldr	r0, [pc, #156]	; (80005b0 <main+0xe4>)
 8000514:	f003 fcb8 	bl	8003e88 <f_mount>
 8000518:	4603      	mov	r3, r0
 800051a:	461a      	mov	r2, r3
 800051c:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <main+0xd8>)
 800051e:	701a      	strb	r2, [r3, #0]
  if(fres != FR_OK)
 8000520:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <main+0xd8>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d000      	beq.n	800052a <main+0x5e>
  {
	  while(1);
 8000528:	e7fe      	b.n	8000528 <main+0x5c>
  }

  fres = f_open(&SFLASHPath, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800052a:	220a      	movs	r2, #10
 800052c:	4921      	ldr	r1, [pc, #132]	; (80005b4 <main+0xe8>)
 800052e:	481e      	ldr	r0, [pc, #120]	; (80005a8 <main+0xdc>)
 8000530:	f003 fcf0 	bl	8003f14 <f_open>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <main+0xd8>)
 800053a:	701a      	strb	r2, [r3, #0]
  if(fres != FR_OK)
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <main+0xd8>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d000      	beq.n	8000546 <main+0x7a>
   {
  	  while(1);
 8000544:	e7fe      	b.n	8000544 <main+0x78>
   }
  else
  {
	  fres = f_write(&SFLASHPath, &str, sizeof(str), brw);
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <main+0xec>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2264      	movs	r2, #100	; 0x64
 800054c:	491b      	ldr	r1, [pc, #108]	; (80005bc <main+0xf0>)
 800054e:	4816      	ldr	r0, [pc, #88]	; (80005a8 <main+0xdc>)
 8000550:	f004 f80b 	bl	800456a <f_write>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <main+0xd8>)
 800055a:	701a      	strb	r2, [r3, #0]
  }
  f_close(&SFLASHPath);
 800055c:	4812      	ldr	r0, [pc, #72]	; (80005a8 <main+0xdc>)
 800055e:	f004 fa16 	bl	800498e <f_close>

  fres = f_open(&SFLASHPath, "test.txt", FA_READ);
 8000562:	2201      	movs	r2, #1
 8000564:	4913      	ldr	r1, [pc, #76]	; (80005b4 <main+0xe8>)
 8000566:	4810      	ldr	r0, [pc, #64]	; (80005a8 <main+0xdc>)
 8000568:	f003 fcd4 	bl	8003f14 <f_open>
 800056c:	4603      	mov	r3, r0
 800056e:	461a      	mov	r2, r3
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <main+0xd8>)
 8000572:	701a      	strb	r2, [r3, #0]
  if(fres != FR_OK)
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <main+0xd8>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d000      	beq.n	800057e <main+0xb2>
   {
    	  while(1);
 800057c:	e7fe      	b.n	800057c <main+0xb0>
   }
  else
  {
	  fres = f_read(&SFLASHPath, &buffer, 50, &brw);
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <main+0xec>)
 8000580:	2232      	movs	r2, #50	; 0x32
 8000582:	4906      	ldr	r1, [pc, #24]	; (800059c <main+0xd0>)
 8000584:	4808      	ldr	r0, [pc, #32]	; (80005a8 <main+0xdc>)
 8000586:	f003 fe91 	bl	80042ac <f_read>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <main+0xd8>)
 8000590:	701a      	strb	r2, [r3, #0]
  }
  f_close(&SFLASHPath);
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <main+0xdc>)
 8000594:	f004 f9fb 	bl	800498e <f_close>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000598:	e7fe      	b.n	8000598 <main+0xcc>
 800059a:	bf00      	nop
 800059c:	20002160 	.word	0x20002160
 80005a0:	080053ac 	.word	0x080053ac
 80005a4:	2000112c 	.word	0x2000112c
 80005a8:	20001130 	.word	0x20001130
 80005ac:	20000070 	.word	0x20000070
 80005b0:	200000f8 	.word	0x200000f8
 80005b4:	080053b0 	.word	0x080053b0
 80005b8:	20003160 	.word	0x20003160
 80005bc:	20000000 	.word	0x20000000

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f004 fed8 	bl	8005384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <SystemClock_Config+0xd0>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000634:	23a8      	movs	r3, #168	; 0xa8
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fe1b 	bl	8001280 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 f898 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000660:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2105      	movs	r1, #5
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f87c 	bl	8001770 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067e:	f000 f881 	bl	8000784 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_SPI1_Init+0x64>)
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <MX_SPI1_Init+0x68>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006e0:	220a      	movs	r2, #10
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006e6:	f001 fa2f 	bl	8001b48 <HAL_SPI_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f0:	f000 f848 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000a0 	.word	0x200000a0
 80006fc:	40013000 	.word	0x40013000

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_GPIO_Init+0x7c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a17      	ldr	r2, [pc, #92]	; (800077c <MX_GPIO_Init+0x7c>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_GPIO_Init+0x7c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_GPIO_Init+0x7c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a10      	ldr	r2, [pc, #64]	; (800077c <MX_GPIO_Init+0x7c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_GPIO_Init+0x7c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2110      	movs	r1, #16
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <MX_GPIO_Init+0x80>)
 8000754:	f000 fd7a 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000758:	2310      	movs	r3, #16
 800075a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4619      	mov	r1, r3
 800076e:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0x80>)
 8000770:	f000 fbd0 	bl	8000f14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <SPIFLASH_disk_initialize>:
#include "spi_flash.h"

extern SPI_HandleTypeDef hspi1;

int32_t SPIFLASH_disk_initialize(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
	int ret;

	ret = W25X_GetChipID();
 8000796:	f000 f82d 	bl	80007f4 <W25X_GetChipID>
 800079a:	6078      	str	r0, [r7, #4]
	if(ret!=W25X16_CHIPID)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <SPIFLASH_disk_initialize+0x24>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d001      	beq.n	80007a8 <SPIFLASH_disk_initialize+0x18>
		return 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e000      	b.n	80007aa <SPIFLASH_disk_initialize+0x1a>

	return 0;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	00ef4015 	.word	0x00ef4015

080007b8 <SPI_Read_Byte>:

uint8_t SPI_Read_Byte(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	return (SPI_Write_Byte(0xFF));
 80007bc:	20ff      	movs	r0, #255	; 0xff
 80007be:	f000 f803 	bl	80007c8 <SPI_Write_Byte>
 80007c2:	4603      	mov	r3, r0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <SPI_Write_Byte>:

uint8_t SPI_Write_Byte(uint8_t data)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
	char read_data;

	HAL_SPI_TransmitReceive(&hspi1, &data, &read_data, 1, 1);
 80007d2:	f107 020f 	add.w	r2, r7, #15
 80007d6:	1df9      	adds	r1, r7, #7
 80007d8:	2301      	movs	r3, #1
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2301      	movs	r3, #1
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <SPI_Write_Byte+0x28>)
 80007e0:	f001 fa3b 	bl	8001c5a <HAL_SPI_TransmitReceive>
	return read_data;
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000a0 	.word	0x200000a0

080007f4 <W25X_GetChipID>:

#if USE_GETCHIPID
int W25X_GetChipID(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
	int nID = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
	
	FLASH_CS_0();
 80007fe:	2200      	movs	r2, #0
 8000800:	2110      	movs	r1, #16
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <W25X_GetChipID+0x60>)
 8000804:	f000 fd22 	bl	800124c <HAL_GPIO_WritePin>

	SPI_Write_Byte(W25X_JedecDeviceID);
 8000808:	209f      	movs	r0, #159	; 0x9f
 800080a:	f7ff ffdd 	bl	80007c8 <SPI_Write_Byte>
	nID = SPI_Read_Byte();
 800080e:	f7ff ffd3 	bl	80007b8 <SPI_Read_Byte>
 8000812:	4603      	mov	r3, r0
 8000814:	607b      	str	r3, [r7, #4]
	nID <<= 8;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	607b      	str	r3, [r7, #4]
	nID |= SPI_Read_Byte();
 800081c:	f7ff ffcc 	bl	80007b8 <SPI_Read_Byte>
 8000820:	4603      	mov	r3, r0
 8000822:	461a      	mov	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4313      	orrs	r3, r2
 8000828:	607b      	str	r3, [r7, #4]
	nID <<= 8;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	607b      	str	r3, [r7, #4]
	nID |= SPI_Read_Byte();
 8000830:	f7ff ffc2 	bl	80007b8 <SPI_Read_Byte>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4313      	orrs	r3, r2
 800083c:	607b      	str	r3, [r7, #4]
	
	FLASH_CS_1();
 800083e:	2201      	movs	r2, #1
 8000840:	2110      	movs	r1, #16
 8000842:	4804      	ldr	r0, [pc, #16]	; (8000854 <W25X_GetChipID+0x60>)
 8000844:	f000 fd02 	bl	800124c <HAL_GPIO_WritePin>

	return nID;
 8000848:	687b      	ldr	r3, [r7, #4]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40020000 	.word	0x40020000

08000858 <W25X_Read_StatusReg>:
#endif

#if USE_READ_STATUSREG
char W25X_Read_StatusReg(void)
{	char u8 = 0;
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]
	FLASH_CS_0();
 8000862:	2200      	movs	r2, #0
 8000864:	2110      	movs	r1, #16
 8000866:	480a      	ldr	r0, [pc, #40]	; (8000890 <W25X_Read_StatusReg+0x38>)
 8000868:	f000 fcf0 	bl	800124c <HAL_GPIO_WritePin>
	SPI_Write_Byte(W25X_ReadStatusReg);
 800086c:	2005      	movs	r0, #5
 800086e:	f7ff ffab 	bl	80007c8 <SPI_Write_Byte>
	u8 = SPI_Read_Byte();
 8000872:	f7ff ffa1 	bl	80007b8 <SPI_Read_Byte>
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	FLASH_CS_1();	
 800087a:	2201      	movs	r2, #1
 800087c:	2110      	movs	r1, #16
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <W25X_Read_StatusReg+0x38>)
 8000880:	f000 fce4 	bl	800124c <HAL_GPIO_WritePin>
	return u8;
 8000884:	79fb      	ldrb	r3, [r7, #7]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40020000 	.word	0x40020000

08000894 <W25X_Write_Enable>:
}
#endif

#if USE_WRITE_ENABLE
void W25X_Write_Enable(void)
{	FLASH_CS_0();
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
 8000898:	2200      	movs	r2, #0
 800089a:	2110      	movs	r1, #16
 800089c:	4806      	ldr	r0, [pc, #24]	; (80008b8 <W25X_Write_Enable+0x24>)
 800089e:	f000 fcd5 	bl	800124c <HAL_GPIO_WritePin>
	SPI_Write_Byte(W25X_WriteEnable);
 80008a2:	2006      	movs	r0, #6
 80008a4:	f7ff ff90 	bl	80007c8 <SPI_Write_Byte>
	FLASH_CS_1();
 80008a8:	2201      	movs	r2, #1
 80008aa:	2110      	movs	r1, #16
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <W25X_Write_Enable+0x24>)
 80008ae:	f000 fccd 	bl	800124c <HAL_GPIO_WritePin>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40020000 	.word	0x40020000

080008bc <W25X_Wait_Busy>:
}
#endif

#if USE_WAIT_BUSY
void W25X_Wait_Busy(void)
{	while(W25X_Read_StatusReg() == 0x03)
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
 80008c0:	e001      	b.n	80008c6 <W25X_Wait_Busy+0xa>
		W25X_Read_StatusReg();
 80008c2:	f7ff ffc9 	bl	8000858 <W25X_Read_StatusReg>
{	while(W25X_Read_StatusReg() == 0x03)
 80008c6:	f7ff ffc7 	bl	8000858 <W25X_Read_StatusReg>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	d0f8      	beq.n	80008c2 <W25X_Wait_Busy+0x6>
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <W25X_Erase_Sector>:
#endif

#if USE_ERASE_SECTOR
void W25X_Erase_Sector(uint32_t nDest)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	nDest *= FLASH_SECTOR_SIZE;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	031b      	lsls	r3, r3, #12
 80008e4:	607b      	str	r3, [r7, #4]
	
	FLASH_CS_0();			
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	4814      	ldr	r0, [pc, #80]	; (800093c <W25X_Erase_Sector+0x64>)
 80008ec:	f000 fcae 	bl	800124c <HAL_GPIO_WritePin>
	W25X_Write_Enable();
 80008f0:	f7ff ffd0 	bl	8000894 <W25X_Write_Enable>
	FLASH_CS_0();
 80008f4:	2200      	movs	r2, #0
 80008f6:	2110      	movs	r1, #16
 80008f8:	4810      	ldr	r0, [pc, #64]	; (800093c <W25X_Erase_Sector+0x64>)
 80008fa:	f000 fca7 	bl	800124c <HAL_GPIO_WritePin>
	SPI_Write_Byte(W25X_SectorErase);
 80008fe:	2020      	movs	r0, #32
 8000900:	f7ff ff62 	bl	80007c8 <SPI_Write_Byte>
	SPI_Write_Byte((char)((nDest & 0xFFFFFF) >> 16));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	0c1b      	lsrs	r3, r3, #16
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff5c 	bl	80007c8 <SPI_Write_Byte>
	SPI_Write_Byte((char)((nDest & 0xFFFF) >> 8));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	0a1b      	lsrs	r3, r3, #8
 8000914:	b2db      	uxtb	r3, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff56 	bl	80007c8 <SPI_Write_Byte>
	SPI_Write_Byte((char)nDest & 0xFF);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff51 	bl	80007c8 <SPI_Write_Byte>
	FLASH_CS_1();
 8000926:	2201      	movs	r2, #1
 8000928:	2110      	movs	r1, #16
 800092a:	4804      	ldr	r0, [pc, #16]	; (800093c <W25X_Erase_Sector+0x64>)
 800092c:	f000 fc8e 	bl	800124c <HAL_GPIO_WritePin>
	W25X_Wait_Busy();
 8000930:	f7ff ffc4 	bl	80008bc <W25X_Wait_Busy>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40020000 	.word	0x40020000

08000940 <W25X_Read_Sector>:
}
#endif

#if USE_READ_SECTOR
void W25X_Read_Sector(uint32_t nSector, char* pBuffer)
{	uint16_t i;
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]

	nSector *= FLASH_SECTOR_SIZE;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	031b      	lsls	r3, r3, #12
 800094e:	607b      	str	r3, [r7, #4]
	
	FLASH_CS_0();
 8000950:	2200      	movs	r2, #0
 8000952:	2110      	movs	r1, #16
 8000954:	4819      	ldr	r0, [pc, #100]	; (80009bc <W25X_Read_Sector+0x7c>)
 8000956:	f000 fc79 	bl	800124c <HAL_GPIO_WritePin>
	SPI_Write_Byte(W25X_ReadData);
 800095a:	2003      	movs	r0, #3
 800095c:	f7ff ff34 	bl	80007c8 <SPI_Write_Byte>
	SPI_Write_Byte((char)(nSector >> 16));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	0c1b      	lsrs	r3, r3, #16
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff2e 	bl	80007c8 <SPI_Write_Byte>
	SPI_Write_Byte((char)(nSector>> 8));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	0a1b      	lsrs	r3, r3, #8
 8000970:	b2db      	uxtb	r3, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ff28 	bl	80007c8 <SPI_Write_Byte>
	SPI_Write_Byte((char) nSector);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff23 	bl	80007c8 <SPI_Write_Byte>
	
	for(i=0;i<FLASH_SECTOR_SIZE;i++)
 8000982:	2300      	movs	r3, #0
 8000984:	81fb      	strh	r3, [r7, #14]
 8000986:	e009      	b.n	800099c <W25X_Read_Sector+0x5c>
	{	pBuffer[i] = SPI_Read_Byte();
 8000988:	89fb      	ldrh	r3, [r7, #14]
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	18d4      	adds	r4, r2, r3
 800098e:	f7ff ff13 	bl	80007b8 <SPI_Read_Byte>
 8000992:	4603      	mov	r3, r0
 8000994:	7023      	strb	r3, [r4, #0]
	for(i=0;i<FLASH_SECTOR_SIZE;i++)
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	3301      	adds	r3, #1
 800099a:	81fb      	strh	r3, [r7, #14]
 800099c:	89fb      	ldrh	r3, [r7, #14]
 800099e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009a2:	d3f1      	bcc.n	8000988 <W25X_Read_Sector+0x48>
	}
	FLASH_CS_1();
 80009a4:	2201      	movs	r2, #1
 80009a6:	2110      	movs	r1, #16
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <W25X_Read_Sector+0x7c>)
 80009aa:	f000 fc4f 	bl	800124c <HAL_GPIO_WritePin>
	W25X_Wait_Busy();
 80009ae:	f7ff ff85 	bl	80008bc <W25X_Wait_Busy>
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40020000 	.word	0x40020000

080009c0 <W25X_Write_Sector>:
}
#endif

#if USE_WRITE_SECTOR
void W25X_Write_Sector(uint32_t nSector, char* pBuffer)
{	
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
	int i,j;

	nSector *= FLASH_SECTOR_SIZE;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	031b      	lsls	r3, r3, #12
 80009ce:	607b      	str	r3, [r7, #4]
	
	for(j=0;j<FLASH_PAGES_PER_SECTOR;j++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	e041      	b.n	8000a5a <W25X_Write_Sector+0x9a>
	{
		FLASH_CS_0();
 80009d6:	2200      	movs	r2, #0
 80009d8:	2110      	movs	r1, #16
 80009da:	4824      	ldr	r0, [pc, #144]	; (8000a6c <W25X_Write_Sector+0xac>)
 80009dc:	f000 fc36 	bl	800124c <HAL_GPIO_WritePin>
		W25X_Write_Enable();
 80009e0:	f7ff ff58 	bl	8000894 <W25X_Write_Enable>
		FLASH_CS_0();
 80009e4:	2200      	movs	r2, #0
 80009e6:	2110      	movs	r1, #16
 80009e8:	4820      	ldr	r0, [pc, #128]	; (8000a6c <W25X_Write_Sector+0xac>)
 80009ea:	f000 fc2f 	bl	800124c <HAL_GPIO_WritePin>
		
		SPI_Write_Byte(W25X_PageProgram);
 80009ee:	2002      	movs	r0, #2
 80009f0:	f7ff feea 	bl	80007c8 <SPI_Write_Byte>
		SPI_Write_Byte((char)(nSector >> 16));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	0c1b      	lsrs	r3, r3, #16
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fee4 	bl	80007c8 <SPI_Write_Byte>
		SPI_Write_Byte((char)(nSector >> 8));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	0a1b      	lsrs	r3, r3, #8
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fede 	bl	80007c8 <SPI_Write_Byte>
		SPI_Write_Byte((char) nSector);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fed9 	bl	80007c8 <SPI_Write_Byte>
		
		for(i=0;i<FLASH_PAGE_SIZE;i++)								
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	e009      	b.n	8000a30 <W25X_Write_Sector+0x70>
			SPI_Write_Byte(pBuffer[i]);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fecf 	bl	80007c8 <SPI_Write_Byte>
		for(i=0;i<FLASH_PAGE_SIZE;i++)								
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2bff      	cmp	r3, #255	; 0xff
 8000a34:	ddf2      	ble.n	8000a1c <W25X_Write_Sector+0x5c>
		
		pBuffer += FLASH_PAGE_SIZE;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a3c:	603b      	str	r3, [r7, #0]
		nSector += FLASH_PAGE_SIZE;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a44:	607b      	str	r3, [r7, #4]

		FLASH_CS_1();
 8000a46:	2201      	movs	r2, #1
 8000a48:	2110      	movs	r1, #16
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <W25X_Write_Sector+0xac>)
 8000a4c:	f000 fbfe 	bl	800124c <HAL_GPIO_WritePin>
		W25X_Wait_Busy();
 8000a50:	f7ff ff34 	bl	80008bc <W25X_Wait_Busy>
	for(j=0;j<FLASH_PAGES_PER_SECTOR;j++)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	2b0f      	cmp	r3, #15
 8000a5e:	ddba      	ble.n	80009d6 <W25X_Write_Sector+0x16>
	}
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40020000 	.word	0x40020000

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <HAL_MspInit+0x4c>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	; 0x44
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_MspInit+0x4c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800

08000ac0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <HAL_SPI_MspInit+0x84>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d12b      	bne.n	8000b3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000aec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b1a:	23e0      	movs	r3, #224	; 0xe0
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_SPI_MspInit+0x8c>)
 8000b36:	f000 f9ed 	bl	8000f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40013000 	.word	0x40013000
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f890 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bcc:	480d      	ldr	r0, [pc, #52]	; (8000c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bce:	490e      	ldr	r1, [pc, #56]	; (8000c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be4:	4c0b      	ldr	r4, [pc, #44]	; (8000c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf2:	f7ff ffd7 	bl	8000ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f004 fba1 	bl	800533c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fc67 	bl	80004cc <main>
  bx  lr    
 8000bfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000c0c:	080054c0 	.word	0x080054c0
  ldr r2, =_sbss
 8000c10:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000c14:	200031a4 	.word	0x200031a4

08000c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <HAL_Init+0x40>)
 8000c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_Init+0x40>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <HAL_Init+0x40>)
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f931 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	200f      	movs	r0, #15
 8000c4c:	f000 f808 	bl	8000c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff ff0e 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_InitTick+0x54>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_InitTick+0x58>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f93b 	bl	8000efa <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00e      	b.n	8000cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d80a      	bhi.n	8000caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f000 f911 	bl	8000ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <HAL_InitTick+0x5c>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000064 	.word	0x20000064
 8000cb8:	2000006c 	.word	0x2000006c
 8000cbc:	20000068 	.word	0x20000068

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	2000006c 	.word	0x2000006c
 8000ce4:	20003164 	.word	0x20003164

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20003164 	.word	0x20003164

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff ffee 	bl	8000ce8 <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_Delay+0x44>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffde 	bl	8000ce8 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000006c 	.word	0x2000006c

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f7ff ff8e 	bl	8000dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff47 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff5c 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff8e 	bl	8000e00 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5d 	bl	8000dac <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffb0 	bl	8000e68 <SysTick_Config>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	e16b      	b.n	8001208 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f30:	2201      	movs	r2, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 815a 	bne.w	8001202 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d005      	beq.n	8000f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d130      	bne.n	8000fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	2203      	movs	r2, #3
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	f003 0201 	and.w	r2, r3, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d017      	beq.n	8001004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d123      	bne.n	8001058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	69b9      	ldr	r1, [r7, #24]
 8001054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0203 	and.w	r2, r3, #3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 80b4 	beq.w	8001202 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b60      	ldr	r3, [pc, #384]	; (8001220 <HAL_GPIO_Init+0x30c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a5f      	ldr	r2, [pc, #380]	; (8001220 <HAL_GPIO_Init+0x30c>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b5d      	ldr	r3, [pc, #372]	; (8001220 <HAL_GPIO_Init+0x30c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b6:	4a5b      	ldr	r2, [pc, #364]	; (8001224 <HAL_GPIO_Init+0x310>)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a52      	ldr	r2, [pc, #328]	; (8001228 <HAL_GPIO_Init+0x314>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d02b      	beq.n	800113a <HAL_GPIO_Init+0x226>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a51      	ldr	r2, [pc, #324]	; (800122c <HAL_GPIO_Init+0x318>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d025      	beq.n	8001136 <HAL_GPIO_Init+0x222>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a50      	ldr	r2, [pc, #320]	; (8001230 <HAL_GPIO_Init+0x31c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d01f      	beq.n	8001132 <HAL_GPIO_Init+0x21e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4f      	ldr	r2, [pc, #316]	; (8001234 <HAL_GPIO_Init+0x320>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d019      	beq.n	800112e <HAL_GPIO_Init+0x21a>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4e      	ldr	r2, [pc, #312]	; (8001238 <HAL_GPIO_Init+0x324>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0x216>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4d      	ldr	r2, [pc, #308]	; (800123c <HAL_GPIO_Init+0x328>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00d      	beq.n	8001126 <HAL_GPIO_Init+0x212>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4c      	ldr	r2, [pc, #304]	; (8001240 <HAL_GPIO_Init+0x32c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0x20e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4b      	ldr	r2, [pc, #300]	; (8001244 <HAL_GPIO_Init+0x330>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_GPIO_Init+0x20a>
 800111a:	2307      	movs	r3, #7
 800111c:	e00e      	b.n	800113c <HAL_GPIO_Init+0x228>
 800111e:	2308      	movs	r3, #8
 8001120:	e00c      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001122:	2306      	movs	r3, #6
 8001124:	e00a      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001126:	2305      	movs	r3, #5
 8001128:	e008      	b.n	800113c <HAL_GPIO_Init+0x228>
 800112a:	2304      	movs	r3, #4
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x228>
 800112e:	2303      	movs	r3, #3
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x228>
 800113a:	2300      	movs	r3, #0
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4093      	lsls	r3, r2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114c:	4935      	ldr	r1, [pc, #212]	; (8001224 <HAL_GPIO_Init+0x310>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115a:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <HAL_GPIO_Init+0x334>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117e:	4a32      	ldr	r2, [pc, #200]	; (8001248 <HAL_GPIO_Init+0x334>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_GPIO_Init+0x334>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a8:	4a27      	ldr	r2, [pc, #156]	; (8001248 <HAL_GPIO_Init+0x334>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <HAL_GPIO_Init+0x334>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d2:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <HAL_GPIO_Init+0x334>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_GPIO_Init+0x334>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011fc:	4a12      	ldr	r2, [pc, #72]	; (8001248 <HAL_GPIO_Init+0x334>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	f67f ae90 	bls.w	8000f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40013800 	.word	0x40013800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400
 8001230:	40020800 	.word	0x40020800
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40021000 	.word	0x40021000
 800123c:	40021400 	.word	0x40021400
 8001240:	40021800 	.word	0x40021800
 8001244:	40021c00 	.word	0x40021c00
 8001248:	40013c00 	.word	0x40013c00

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001268:	e003      	b.n	8001272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	041a      	lsls	r2, r3, #16
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	619a      	str	r2, [r3, #24]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e267      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d075      	beq.n	800138a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129e:	4b88      	ldr	r3, [pc, #544]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d00c      	beq.n	80012c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012aa:	4b85      	ldr	r3, [pc, #532]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d112      	bne.n	80012dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b6:	4b82      	ldr	r3, [pc, #520]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012c2:	d10b      	bne.n	80012dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c4:	4b7e      	ldr	r3, [pc, #504]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d05b      	beq.n	8001388 <HAL_RCC_OscConfig+0x108>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d157      	bne.n	8001388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e242      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e4:	d106      	bne.n	80012f4 <HAL_RCC_OscConfig+0x74>
 80012e6:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a75      	ldr	r2, [pc, #468]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e01d      	b.n	8001330 <HAL_RCC_OscConfig+0xb0>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x98>
 80012fe:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a6f      	ldr	r2, [pc, #444]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b6d      	ldr	r3, [pc, #436]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a6c      	ldr	r2, [pc, #432]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e00b      	b.n	8001330 <HAL_RCC_OscConfig+0xb0>
 8001318:	4b69      	ldr	r3, [pc, #420]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a68      	ldr	r2, [pc, #416]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800131e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b66      	ldr	r3, [pc, #408]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a65      	ldr	r2, [pc, #404]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800132a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d013      	beq.n	8001360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fcd6 	bl	8000ce8 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fcd2 	bl	8000ce8 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	; 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e207      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	4b5b      	ldr	r3, [pc, #364]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0xc0>
 800135e:	e014      	b.n	800138a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fcc2 	bl	8000ce8 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fcbe 	bl	8000ce8 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e1f3      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	4b51      	ldr	r3, [pc, #324]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0xe8>
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d063      	beq.n	800145e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001396:	4b4a      	ldr	r3, [pc, #296]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00b      	beq.n	80013ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a2:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d11c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ae:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d116      	bne.n	80013e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <HAL_RCC_OscConfig+0x152>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d001      	beq.n	80013d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e1c7      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4937      	ldr	r1, [pc, #220]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e6:	e03a      	b.n	800145e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d020      	beq.n	8001432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <HAL_RCC_OscConfig+0x244>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff fc77 	bl	8000ce8 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fe:	f7ff fc73 	bl	8000ce8 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e1a8      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141c:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4925      	ldr	r1, [pc, #148]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 800142c:	4313      	orrs	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
 8001430:	e015      	b.n	800145e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_RCC_OscConfig+0x244>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fc56 	bl	8000ce8 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001440:	f7ff fc52 	bl	8000ce8 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e187      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d036      	beq.n	80014d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d016      	beq.n	80014a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_RCC_OscConfig+0x248>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff fc36 	bl	8000ce8 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fc32 	bl	8000ce8 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e167      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_RCC_OscConfig+0x240>)
 8001494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x200>
 800149e:	e01b      	b.n	80014d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_RCC_OscConfig+0x248>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fc1f 	bl	8000ce8 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	e00e      	b.n	80014cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ae:	f7ff fc1b 	bl	8000ce8 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d907      	bls.n	80014cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e150      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
 80014c0:	40023800 	.word	0x40023800
 80014c4:	42470000 	.word	0x42470000
 80014c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	4b88      	ldr	r3, [pc, #544]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1ea      	bne.n	80014ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 8097 	beq.w	8001614 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ea:	4b81      	ldr	r3, [pc, #516]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10f      	bne.n	8001516 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b7d      	ldr	r3, [pc, #500]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a7c      	ldr	r2, [pc, #496]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b7a      	ldr	r3, [pc, #488]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001512:	2301      	movs	r3, #1
 8001514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001516:	4b77      	ldr	r3, [pc, #476]	; (80016f4 <HAL_RCC_OscConfig+0x474>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d118      	bne.n	8001554 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001522:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <HAL_RCC_OscConfig+0x474>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a73      	ldr	r2, [pc, #460]	; (80016f4 <HAL_RCC_OscConfig+0x474>)
 8001528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152e:	f7ff fbdb 	bl	8000ce8 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001536:	f7ff fbd7 	bl	8000ce8 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e10c      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	4b6a      	ldr	r3, [pc, #424]	; (80016f4 <HAL_RCC_OscConfig+0x474>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x2ea>
 800155c:	4b64      	ldr	r3, [pc, #400]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	4a63      	ldr	r2, [pc, #396]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6713      	str	r3, [r2, #112]	; 0x70
 8001568:	e01c      	b.n	80015a4 <HAL_RCC_OscConfig+0x324>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b05      	cmp	r3, #5
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0x30c>
 8001572:	4b5f      	ldr	r3, [pc, #380]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	4a5e      	ldr	r2, [pc, #376]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6713      	str	r3, [r2, #112]	; 0x70
 800157e:	4b5c      	ldr	r3, [pc, #368]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	4a5b      	ldr	r2, [pc, #364]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6713      	str	r3, [r2, #112]	; 0x70
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0x324>
 800158c:	4b58      	ldr	r3, [pc, #352]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	4a57      	ldr	r2, [pc, #348]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	6713      	str	r3, [r2, #112]	; 0x70
 8001598:	4b55      	ldr	r3, [pc, #340]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	4a54      	ldr	r2, [pc, #336]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800159e:	f023 0304 	bic.w	r3, r3, #4
 80015a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d015      	beq.n	80015d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7ff fb9c 	bl	8000ce8 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff fb98 	bl	8000ce8 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0cb      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ca:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0ee      	beq.n	80015b4 <HAL_RCC_OscConfig+0x334>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d8:	f7ff fb86 	bl	8000ce8 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff fb82 	bl	8000ce8 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0b5      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f6:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1ee      	bne.n	80015e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d105      	bne.n	8001614 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001608:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a38      	ldr	r2, [pc, #224]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 800160e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80a1 	beq.w	8001760 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800161e:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b08      	cmp	r3, #8
 8001628:	d05c      	beq.n	80016e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d141      	bne.n	80016b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001632:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <HAL_RCC_OscConfig+0x478>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fb56 	bl	8000ce8 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff fb52 	bl	8000ce8 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e087      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001652:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69da      	ldr	r2, [r3, #28]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	019b      	lsls	r3, r3, #6
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	085b      	lsrs	r3, r3, #1
 8001676:	3b01      	subs	r3, #1
 8001678:	041b      	lsls	r3, r3, #16
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	061b      	lsls	r3, r3, #24
 8001682:	491b      	ldr	r1, [pc, #108]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x478>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7ff fb2b 	bl	8000ce8 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001696:	f7ff fb27 	bl	8000ce8 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e05c      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x416>
 80016b4:	e054      	b.n	8001760 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_RCC_OscConfig+0x478>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fb14 	bl	8000ce8 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff fb10 	bl	8000ce8 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e045      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_RCC_OscConfig+0x470>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x444>
 80016e2:	e03d      	b.n	8001760 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d107      	bne.n	80016fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e038      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40007000 	.word	0x40007000
 80016f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x4ec>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d028      	beq.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d121      	bne.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d11a      	bne.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800172c:	4013      	ands	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001734:	4293      	cmp	r3, r2
 8001736:	d111      	bne.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	085b      	lsrs	r3, r3, #1
 8001744:	3b01      	subs	r3, #1
 8001746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d107      	bne.n	800175c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800

08001770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0cc      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001784:	4b68      	ldr	r3, [pc, #416]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d90c      	bls.n	80017ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b65      	ldr	r3, [pc, #404]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b63      	ldr	r3, [pc, #396]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0b8      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c4:	4b59      	ldr	r3, [pc, #356]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4a58      	ldr	r2, [pc, #352]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e8:	4b50      	ldr	r3, [pc, #320]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	494d      	ldr	r1, [pc, #308]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d044      	beq.n	8001890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180e:	4b47      	ldr	r3, [pc, #284]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d119      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e07f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d003      	beq.n	800182e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182a:	2b03      	cmp	r3, #3
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182e:	4b3f      	ldr	r3, [pc, #252]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183e:	4b3b      	ldr	r3, [pc, #236]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e067      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184e:	4b37      	ldr	r3, [pc, #220]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f023 0203 	bic.w	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4934      	ldr	r1, [pc, #208]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	4313      	orrs	r3, r2
 800185e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001860:	f7ff fa42 	bl	8000ce8 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001866:	e00a      	b.n	800187e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001868:	f7ff fa3e 	bl	8000ce8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	; 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e04f      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	4b2b      	ldr	r3, [pc, #172]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 020c 	and.w	r2, r3, #12
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	429a      	cmp	r2, r3
 800188e:	d1eb      	bne.n	8001868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d20c      	bcs.n	80018b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e032      	b.n	800191e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4916      	ldr	r1, [pc, #88]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	490e      	ldr	r1, [pc, #56]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018f6:	f000 f821 	bl	800193c <HAL_RCC_GetSysClockFreq>
 80018fa:	4602      	mov	r2, r0
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	490a      	ldr	r1, [pc, #40]	; (8001930 <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	5ccb      	ldrb	r3, [r1, r3]
 800190a:	fa22 f303 	lsr.w	r3, r2, r3
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1c8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f9a2 	bl	8000c60 <HAL_InitTick>

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023c00 	.word	0x40023c00
 800192c:	40023800 	.word	0x40023800
 8001930:	08005400 	.word	0x08005400
 8001934:	20000064 	.word	0x20000064
 8001938:	20000068 	.word	0x20000068

0800193c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800193c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001940:	b094      	sub	sp, #80	; 0x50
 8001942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	647b      	str	r3, [r7, #68]	; 0x44
 8001948:	2300      	movs	r3, #0
 800194a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800194c:	2300      	movs	r3, #0
 800194e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001954:	4b79      	ldr	r3, [pc, #484]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b08      	cmp	r3, #8
 800195e:	d00d      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x40>
 8001960:	2b08      	cmp	r3, #8
 8001962:	f200 80e1 	bhi.w	8001b28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x34>
 800196a:	2b04      	cmp	r3, #4
 800196c:	d003      	beq.n	8001976 <HAL_RCC_GetSysClockFreq+0x3a>
 800196e:	e0db      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b73      	ldr	r3, [pc, #460]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001974:	e0db      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001976:	4b73      	ldr	r3, [pc, #460]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x208>)
 8001978:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800197a:	e0d8      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800197c:	4b6f      	ldr	r3, [pc, #444]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x200>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001984:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001986:	4b6d      	ldr	r3, [pc, #436]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d063      	beq.n	8001a5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001992:	4b6a      	ldr	r3, [pc, #424]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	099b      	lsrs	r3, r3, #6
 8001998:	2200      	movs	r2, #0
 800199a:	63bb      	str	r3, [r7, #56]	; 0x38
 800199c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800199e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
 80019a6:	2300      	movs	r3, #0
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
 80019aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019ae:	4622      	mov	r2, r4
 80019b0:	462b      	mov	r3, r5
 80019b2:	f04f 0000 	mov.w	r0, #0
 80019b6:	f04f 0100 	mov.w	r1, #0
 80019ba:	0159      	lsls	r1, r3, #5
 80019bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c0:	0150      	lsls	r0, r2, #5
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4621      	mov	r1, r4
 80019c8:	1a51      	subs	r1, r2, r1
 80019ca:	6139      	str	r1, [r7, #16]
 80019cc:	4629      	mov	r1, r5
 80019ce:	eb63 0301 	sbc.w	r3, r3, r1
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019e0:	4659      	mov	r1, fp
 80019e2:	018b      	lsls	r3, r1, #6
 80019e4:	4651      	mov	r1, sl
 80019e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ea:	4651      	mov	r1, sl
 80019ec:	018a      	lsls	r2, r1, #6
 80019ee:	4651      	mov	r1, sl
 80019f0:	ebb2 0801 	subs.w	r8, r2, r1
 80019f4:	4659      	mov	r1, fp
 80019f6:	eb63 0901 	sbc.w	r9, r3, r1
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a0e:	4690      	mov	r8, r2
 8001a10:	4699      	mov	r9, r3
 8001a12:	4623      	mov	r3, r4
 8001a14:	eb18 0303 	adds.w	r3, r8, r3
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	462b      	mov	r3, r5
 8001a1c:	eb49 0303 	adc.w	r3, r9, r3
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a2e:	4629      	mov	r1, r5
 8001a30:	024b      	lsls	r3, r1, #9
 8001a32:	4621      	mov	r1, r4
 8001a34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a38:	4621      	mov	r1, r4
 8001a3a:	024a      	lsls	r2, r1, #9
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a42:	2200      	movs	r2, #0
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a4c:	f7fe fbbc 	bl	80001c8 <__aeabi_uldivmod>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4613      	mov	r3, r2
 8001a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a58:	e058      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5a:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	099b      	lsrs	r3, r3, #6
 8001a60:	2200      	movs	r2, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	4611      	mov	r1, r2
 8001a66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a6a:	623b      	str	r3, [r7, #32]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a74:	4642      	mov	r2, r8
 8001a76:	464b      	mov	r3, r9
 8001a78:	f04f 0000 	mov.w	r0, #0
 8001a7c:	f04f 0100 	mov.w	r1, #0
 8001a80:	0159      	lsls	r1, r3, #5
 8001a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a86:	0150      	lsls	r0, r2, #5
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4641      	mov	r1, r8
 8001a8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a92:	4649      	mov	r1, r9
 8001a94:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001aa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aac:	ebb2 040a 	subs.w	r4, r2, sl
 8001ab0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	00eb      	lsls	r3, r5, #3
 8001abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ac2:	00e2      	lsls	r2, r4, #3
 8001ac4:	4614      	mov	r4, r2
 8001ac6:	461d      	mov	r5, r3
 8001ac8:	4643      	mov	r3, r8
 8001aca:	18e3      	adds	r3, r4, r3
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	464b      	mov	r3, r9
 8001ad0:	eb45 0303 	adc.w	r3, r5, r3
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	028b      	lsls	r3, r1, #10
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aec:	4621      	mov	r1, r4
 8001aee:	028a      	lsls	r2, r1, #10
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af6:	2200      	movs	r2, #0
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	61fa      	str	r2, [r7, #28]
 8001afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b00:	f7fe fb62 	bl	80001c8 <__aeabi_uldivmod>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4613      	mov	r3, r2
 8001b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	0c1b      	lsrs	r3, r3, #16
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	3301      	adds	r3, #1
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b26:	e002      	b.n	8001b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3750      	adds	r7, #80	; 0x50
 8001b34:	46bd      	mov	sp, r7
 8001b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	00f42400 	.word	0x00f42400
 8001b44:	007a1200 	.word	0x007a1200

08001b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e07b      	b.n	8001c52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d108      	bne.n	8001b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b6a:	d009      	beq.n	8001b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
 8001b72:	e005      	b.n	8001b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7fe ff90 	bl	8000ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	ea42 0103 	orr.w	r1, r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	0c1b      	lsrs	r3, r3, #16
 8001c1e:	f003 0104 	and.w	r1, r3, #4
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	f003 0210 	and.w	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	69da      	ldr	r2, [r3, #28]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b08c      	sub	sp, #48	; 0x30
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_SPI_TransmitReceive+0x26>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e18a      	b.n	8001f96 <HAL_SPI_TransmitReceive+0x33c>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c88:	f7ff f82e 	bl	8000ce8 <HAL_GetTick>
 8001c8c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ca2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d00f      	beq.n	8001cca <HAL_SPI_TransmitReceive+0x70>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cb0:	d107      	bne.n	8001cc2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d103      	bne.n	8001cc2 <HAL_SPI_TransmitReceive+0x68>
 8001cba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d003      	beq.n	8001cca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001cc8:	e15b      	b.n	8001f82 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_SPI_TransmitReceive+0x82>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_SPI_TransmitReceive+0x82>
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d103      	bne.n	8001ce4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ce2:	e14e      	b.n	8001f82 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d003      	beq.n	8001cf8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2205      	movs	r2, #5
 8001cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	887a      	ldrh	r2, [r7, #2]
 8001d0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	887a      	ldrh	r2, [r7, #2]
 8001d1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d38:	2b40      	cmp	r3, #64	; 0x40
 8001d3a:	d007      	beq.n	8001d4c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d54:	d178      	bne.n	8001e48 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <HAL_SPI_TransmitReceive+0x10a>
 8001d5e:	8b7b      	ldrh	r3, [r7, #26]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d166      	bne.n	8001e32 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	881a      	ldrh	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	1c9a      	adds	r2, r3, #2
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d88:	e053      	b.n	8001e32 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d11b      	bne.n	8001dd0 <HAL_SPI_TransmitReceive+0x176>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d016      	beq.n	8001dd0 <HAL_SPI_TransmitReceive+0x176>
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d113      	bne.n	8001dd0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	881a      	ldrh	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	1c9a      	adds	r2, r3, #2
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d119      	bne.n	8001e12 <HAL_SPI_TransmitReceive+0x1b8>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d014      	beq.n	8001e12 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df2:	b292      	uxth	r2, r2
 8001df4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	1c9a      	adds	r2, r3, #2
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e12:	f7fe ff69 	bl	8000ce8 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d807      	bhi.n	8001e32 <HAL_SPI_TransmitReceive+0x1d8>
 8001e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e28:	d003      	beq.n	8001e32 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e30:	e0a7      	b.n	8001f82 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1a6      	bne.n	8001d8a <HAL_SPI_TransmitReceive+0x130>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1a1      	bne.n	8001d8a <HAL_SPI_TransmitReceive+0x130>
 8001e46:	e07c      	b.n	8001f42 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_SPI_TransmitReceive+0x1fc>
 8001e50:	8b7b      	ldrh	r3, [r7, #26]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d16b      	bne.n	8001f2e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	330c      	adds	r3, #12
 8001e60:	7812      	ldrb	r2, [r2, #0]
 8001e62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e7c:	e057      	b.n	8001f2e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d11c      	bne.n	8001ec6 <HAL_SPI_TransmitReceive+0x26c>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d017      	beq.n	8001ec6 <HAL_SPI_TransmitReceive+0x26c>
 8001e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d114      	bne.n	8001ec6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d119      	bne.n	8001f08 <HAL_SPI_TransmitReceive+0x2ae>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d014      	beq.n	8001f08 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f04:	2301      	movs	r3, #1
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f08:	f7fe feee 	bl	8000ce8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d803      	bhi.n	8001f20 <HAL_SPI_TransmitReceive+0x2c6>
 8001f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1e:	d102      	bne.n	8001f26 <HAL_SPI_TransmitReceive+0x2cc>
 8001f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d103      	bne.n	8001f2e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f2c:	e029      	b.n	8001f82 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1a2      	bne.n	8001e7e <HAL_SPI_TransmitReceive+0x224>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d19d      	bne.n	8001e7e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f8b2 	bl	80020b0 <SPI_EndRxTxTransaction>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001f5e:	e010      	b.n	8001f82 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10b      	bne.n	8001f80 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	e000      	b.n	8001f82 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001f80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3730      	adds	r7, #48	; 0x30
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fb0:	f7fe fe9a 	bl	8000ce8 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001fc0:	f7fe fe92 	bl	8000ce8 <HAL_GetTick>
 8001fc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fc6:	4b39      	ldr	r3, [pc, #228]	; (80020ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	015b      	lsls	r3, r3, #5
 8001fcc:	0d1b      	lsrs	r3, r3, #20
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fd6:	e054      	b.n	8002082 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fde:	d050      	beq.n	8002082 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fe0:	f7fe fe82 	bl	8000ce8 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d902      	bls.n	8001ff6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d13d      	bne.n	8002072 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002004:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800200e:	d111      	bne.n	8002034 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002018:	d004      	beq.n	8002024 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002022:	d107      	bne.n	8002034 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002032:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800203c:	d10f      	bne.n	800205e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800205c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e017      	b.n	80020a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3b01      	subs	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4013      	ands	r3, r2
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	429a      	cmp	r2, r3
 8002090:	bf0c      	ite	eq
 8002092:	2301      	moveq	r3, #1
 8002094:	2300      	movne	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	429a      	cmp	r2, r3
 800209e:	d19b      	bne.n	8001fd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3720      	adds	r7, #32
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000064 	.word	0x20000064

080020b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <SPI_EndRxTxTransaction+0x7c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <SPI_EndRxTxTransaction+0x80>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	0d5b      	lsrs	r3, r3, #21
 80020c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020cc:	fb02 f303 	mul.w	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020da:	d112      	bne.n	8002102 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2200      	movs	r2, #0
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7ff ff5a 	bl	8001fa0 <SPI_WaitFlagStateUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	f043 0220 	orr.w	r2, r3, #32
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e00f      	b.n	8002122 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	3b01      	subs	r3, #1
 800210c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002118:	2b80      	cmp	r3, #128	; 0x80
 800211a:	d0f2      	beq.n	8002102 <SPI_EndRxTxTransaction+0x52>
 800211c:	e000      	b.n	8002120 <SPI_EndRxTxTransaction+0x70>
        break;
 800211e:	bf00      	nop
  }

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000064 	.word	0x20000064
 8002130:	165e9f81 	.word	0x165e9f81

08002134 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002138:	4904      	ldr	r1, [pc, #16]	; (800214c <MX_FATFS_Init+0x18>)
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <MX_FATFS_Init+0x1c>)
 800213c:	f003 f8ee 	bl	800531c <FATFS_LinkDriver>
 8002140:	4603      	mov	r3, r0
 8002142:	461a      	mov	r2, r3
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <MX_FATFS_Init+0x20>)
 8002146:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	2000316c 	.word	0x2000316c
 8002150:	20000070 	.word	0x20000070
 8002154:	20003168 	.word	0x20003168

08002158 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800215c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return (SPIFLASH_disk_initialize() ? STA_NOINIT : RES_OK);
 8002172:	f7fe fb0d 	bl	8000790 <SPIFLASH_disk_initialize>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	if(W25X_Read_StatusReg() == 0x03)
 8002194:	f7fe fb60 	bl	8000858 <W25X_Read_StatusReg>
 8002198:	4603      	mov	r3, r0
 800219a:	2b03      	cmp	r3, #3
 800219c:	d101      	bne.n	80021a2 <USER_status+0x18>
		return RES_NOTRDY;
 800219e:	2303      	movs	r3, #3
 80021a0:	e000      	b.n	80021a4 <USER_status+0x1a>

	return RES_OK;
 80021a2:	2300      	movs	r3, #0
  /* USER CODE END STATUS */
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	4603      	mov	r3, r0
 80021ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	int i;
	for(i=0;i<count;i++)
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	e00d      	b.n	80021de <USER_read+0x32>
	{
		W25X_Read_Sector(sector,buff);
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7fe fbbb 	bl	8000940 <W25X_Read_Sector>
		sector ++;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3301      	adds	r3, #1
 80021ce:	607b      	str	r3, [r7, #4]
		buff += FLASH_SECTOR_SIZE;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d6:	60bb      	str	r3, [r7, #8]
	for(i=0;i<count;i++)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3301      	adds	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d8ed      	bhi.n	80021c2 <USER_read+0x16>
	}

	return RES_OK;
 80021e6:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	4603      	mov	r3, r0
 80021fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	int i;
	for(i=0;i<count;i++)
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	e010      	b.n	8002228 <USER_write+0x38>
	{
		W25X_Erase_Sector(sector);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fb66 	bl	80008d8 <W25X_Erase_Sector>

		W25X_Write_Sector(sector,(char*)buff);
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe fbd6 	bl	80009c0 <W25X_Write_Sector>
		sector ++;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3301      	adds	r3, #1
 8002218:	607b      	str	r3, [r7, #4]
		buff += FLASH_SECTOR_SIZE;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002220:	60bb      	str	r3, [r7, #8]
	for(i=0;i<count;i++)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3301      	adds	r3, #1
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d8ea      	bhi.n	8002206 <USER_write+0x16>
	}

	return RES_OK;
 8002230:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	603a      	str	r2, [r7, #0]
 8002246:	71fb      	strb	r3, [r7, #7]
 8002248:	460b      	mov	r3, r1
 800224a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	73fb      	strb	r3, [r7, #15]

		switch(cmd)
 8002250:	79bb      	ldrb	r3, [r7, #6]
 8002252:	2b03      	cmp	r3, #3
 8002254:	d819      	bhi.n	800228a <USER_ioctl+0x4e>
 8002256:	a201      	add	r2, pc, #4	; (adr r2, 800225c <USER_ioctl+0x20>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	0800228b 	.word	0x0800228b
 8002260:	08002281 	.word	0x08002281
 8002264:	08002277 	.word	0x08002277
 8002268:	0800226d 	.word	0x0800226d
			{
				case CTRL_SYNC :
					break;

				case GET_BLOCK_SIZE:
					*(DWORD*)buff = FLASH_BLOCK_SIZE;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002272:	601a      	str	r2, [r3, #0]
					break;
 8002274:	e00a      	b.n	800228c <USER_ioctl+0x50>


				case GET_SECTOR_SIZE:
					*(DWORD*)buff = FLASH_SECTOR_SIZE;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800227c:	601a      	str	r2, [r3, #0]
					break;
 800227e:	e005      	b.n	800228c <USER_ioctl+0x50>

				case GET_SECTOR_COUNT:
					*(DWORD*)buff = FLASH_SECTOR_COUNT;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002286:	601a      	str	r2, [r3, #0]
					break;
 8002288:	e000      	b.n	800228c <USER_ioctl+0x50>

				default:
					break;
 800228a:	bf00      	nop
			}
			return res;
 800228c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop

0800229c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	4a08      	ldr	r2, [pc, #32]	; (80022cc <disk_status+0x30>)
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	79fa      	ldrb	r2, [r7, #7]
 80022b4:	4905      	ldr	r1, [pc, #20]	; (80022cc <disk_status+0x30>)
 80022b6:	440a      	add	r2, r1
 80022b8:	7a12      	ldrb	r2, [r2, #8]
 80022ba:	4610      	mov	r0, r2
 80022bc:	4798      	blx	r3
 80022be:	4603      	mov	r3, r0
 80022c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20003198 	.word	0x20003198

080022d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <disk_initialize+0x48>)
 80022e2:	5cd3      	ldrb	r3, [r2, r3]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d111      	bne.n	800230c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <disk_initialize+0x48>)
 80022ec:	2101      	movs	r1, #1
 80022ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	4a09      	ldr	r2, [pc, #36]	; (8002318 <disk_initialize+0x48>)
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	79fa      	ldrb	r2, [r7, #7]
 80022fe:	4906      	ldr	r1, [pc, #24]	; (8002318 <disk_initialize+0x48>)
 8002300:	440a      	add	r2, r1
 8002302:	7a12      	ldrb	r2, [r2, #8]
 8002304:	4610      	mov	r0, r2
 8002306:	4798      	blx	r3
 8002308:	4603      	mov	r3, r0
 800230a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20003198 	.word	0x20003198

0800231c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	4603      	mov	r3, r0
 800232a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <disk_read+0x3c>)
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	689c      	ldr	r4, [r3, #8]
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	4a07      	ldr	r2, [pc, #28]	; (8002358 <disk_read+0x3c>)
 800233c:	4413      	add	r3, r2
 800233e:	7a18      	ldrb	r0, [r3, #8]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	47a0      	blx	r4
 8002348:	4603      	mov	r3, r0
 800234a:	75fb      	strb	r3, [r7, #23]
  return res;
 800234c:	7dfb      	ldrb	r3, [r7, #23]
}
 800234e:	4618      	mov	r0, r3
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	bd90      	pop	{r4, r7, pc}
 8002356:	bf00      	nop
 8002358:	20003198 	.word	0x20003198

0800235c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	4603      	mov	r3, r0
 800236a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <disk_write+0x3c>)
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	68dc      	ldr	r4, [r3, #12]
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <disk_write+0x3c>)
 800237c:	4413      	add	r3, r2
 800237e:	7a18      	ldrb	r0, [r3, #8]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	47a0      	blx	r4
 8002388:	4603      	mov	r3, r0
 800238a:	75fb      	strb	r3, [r7, #23]
  return res;
 800238c:	7dfb      	ldrb	r3, [r7, #23]
}
 800238e:	4618      	mov	r0, r3
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}
 8002396:	bf00      	nop
 8002398:	20003198 	.word	0x20003198

0800239c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	603a      	str	r2, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
 80023a8:	460b      	mov	r3, r1
 80023aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <disk_ioctl+0x38>)
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	79fa      	ldrb	r2, [r7, #7]
 80023ba:	4906      	ldr	r1, [pc, #24]	; (80023d4 <disk_ioctl+0x38>)
 80023bc:	440a      	add	r2, r1
 80023be:	7a10      	ldrb	r0, [r2, #8]
 80023c0:	79b9      	ldrb	r1, [r7, #6]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	4798      	blx	r3
 80023c6:	4603      	mov	r3, r0
 80023c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20003198 	.word	0x20003198

080023d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3301      	adds	r3, #1
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80023e8:	89fb      	ldrh	r3, [r7, #14]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	b21a      	sxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	4313      	orrs	r3, r2
 80023f6:	b21b      	sxth	r3, r3
 80023f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80023fa:	89fb      	ldrh	r3, [r7, #14]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3303      	adds	r3, #3
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021b      	lsls	r3, r3, #8
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	3202      	adds	r2, #2
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	3201      	adds	r2, #1
 800242e:	7812      	ldrb	r2, [r2, #0]
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	7812      	ldrb	r2, [r2, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
	return rv;
 8002440:	68fb      	ldr	r3, [r7, #12]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	887a      	ldrh	r2, [r7, #2]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	701a      	strb	r2, [r3, #0]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00d      	beq.n	8002512 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	1c53      	adds	r3, r2, #1
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	1c59      	adds	r1, r3, #1
 8002500:	6179      	str	r1, [r7, #20]
 8002502:	7812      	ldrb	r2, [r2, #0]
 8002504:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3b01      	subs	r3, #1
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f1      	bne.n	80024f6 <mem_cpy+0x1a>
	}
}
 8002512:	bf00      	nop
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800251e:	b480      	push	{r7}
 8002520:	b087      	sub	sp, #28
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	617a      	str	r2, [r7, #20]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3b01      	subs	r3, #1
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f3      	bne.n	800252e <mem_set+0x10>
}
 8002546:	bf00      	nop
 8002548:	bf00      	nop
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	61fa      	str	r2, [r7, #28]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	61ba      	str	r2, [r7, #24]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	1acb      	subs	r3, r1, r3
 8002580:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3b01      	subs	r3, #1
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <mem_cmp+0x40>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0eb      	beq.n	800256c <mem_cmp+0x18>

	return r;
 8002594:	697b      	ldr	r3, [r7, #20]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3724      	adds	r7, #36	; 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80025ac:	e002      	b.n	80025b4 <chk_chr+0x12>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3301      	adds	r3, #1
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <chk_chr+0x26>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d1f2      	bne.n	80025ae <chk_chr+0xc>
	return *str;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	781b      	ldrb	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	e029      	b.n	8002640 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80025ec:	4a27      	ldr	r2, [pc, #156]	; (800268c <chk_lock+0xb4>)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	4413      	add	r3, r2
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01d      	beq.n	8002636 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80025fa:	4a24      	ldr	r2, [pc, #144]	; (800268c <chk_lock+0xb4>)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	4413      	add	r3, r2
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d116      	bne.n	800263a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800260c:	4a1f      	ldr	r2, [pc, #124]	; (800268c <chk_lock+0xb4>)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4413      	add	r3, r2
 8002614:	3304      	adds	r3, #4
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800261c:	429a      	cmp	r2, r3
 800261e:	d10c      	bne.n	800263a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002620:	4a1a      	ldr	r2, [pc, #104]	; (800268c <chk_lock+0xb4>)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	4413      	add	r3, r2
 8002628:	3308      	adds	r3, #8
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8002630:	429a      	cmp	r2, r3
 8002632:	d102      	bne.n	800263a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002634:	e007      	b.n	8002646 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002636:	2301      	movs	r3, #1
 8002638:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3301      	adds	r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d9d2      	bls.n	80025ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d109      	bne.n	8002660 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d102      	bne.n	8002658 <chk_lock+0x80>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d101      	bne.n	800265c <chk_lock+0x84>
 8002658:	2300      	movs	r3, #0
 800265a:	e010      	b.n	800267e <chk_lock+0xa6>
 800265c:	2312      	movs	r3, #18
 800265e:	e00e      	b.n	800267e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d108      	bne.n	8002678 <chk_lock+0xa0>
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <chk_lock+0xb4>)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	4413      	add	r3, r2
 800266e:	330c      	adds	r3, #12
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002676:	d101      	bne.n	800267c <chk_lock+0xa4>
 8002678:	2310      	movs	r3, #16
 800267a:	e000      	b.n	800267e <chk_lock+0xa6>
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20003178 	.word	0x20003178

08002690 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	e002      	b.n	80026a2 <enq_lock+0x12>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3301      	adds	r3, #1
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d806      	bhi.n	80026b6 <enq_lock+0x26>
 80026a8:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <enq_lock+0x40>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	4413      	add	r3, r2
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f2      	bne.n	800269c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	bf14      	ite	ne
 80026bc:	2301      	movne	r3, #1
 80026be:	2300      	moveq	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20003178 	.word	0x20003178

080026d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	e01f      	b.n	8002724 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80026e4:	4a41      	ldr	r2, [pc, #260]	; (80027ec <inc_lock+0x118>)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	4413      	add	r3, r2
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d113      	bne.n	800271e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80026f6:	4a3d      	ldr	r2, [pc, #244]	; (80027ec <inc_lock+0x118>)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	4413      	add	r3, r2
 80026fe:	3304      	adds	r3, #4
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002706:	429a      	cmp	r2, r3
 8002708:	d109      	bne.n	800271e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800270a:	4a38      	ldr	r2, [pc, #224]	; (80027ec <inc_lock+0x118>)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	4413      	add	r3, r2
 8002712:	3308      	adds	r3, #8
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800271a:	429a      	cmp	r2, r3
 800271c:	d006      	beq.n	800272c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3301      	adds	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d9dc      	bls.n	80026e4 <inc_lock+0x10>
 800272a:	e000      	b.n	800272e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800272c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d132      	bne.n	800279a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	e002      	b.n	8002740 <inc_lock+0x6c>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3301      	adds	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d806      	bhi.n	8002754 <inc_lock+0x80>
 8002746:	4a29      	ldr	r2, [pc, #164]	; (80027ec <inc_lock+0x118>)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	4413      	add	r3, r2
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f2      	bne.n	800273a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d101      	bne.n	800275e <inc_lock+0x8a>
 800275a:	2300      	movs	r3, #0
 800275c:	e040      	b.n	80027e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4922      	ldr	r1, [pc, #136]	; (80027ec <inc_lock+0x118>)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	440b      	add	r3, r1
 800276a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	491e      	ldr	r1, [pc, #120]	; (80027ec <inc_lock+0x118>)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	440b      	add	r3, r1
 8002778:	3304      	adds	r3, #4
 800277a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	491a      	ldr	r1, [pc, #104]	; (80027ec <inc_lock+0x118>)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	440b      	add	r3, r1
 8002788:	3308      	adds	r3, #8
 800278a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800278c:	4a17      	ldr	r2, [pc, #92]	; (80027ec <inc_lock+0x118>)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	4413      	add	r3, r2
 8002794:	330c      	adds	r3, #12
 8002796:	2200      	movs	r2, #0
 8002798:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d009      	beq.n	80027b4 <inc_lock+0xe0>
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <inc_lock+0x118>)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	4413      	add	r3, r2
 80027a8:	330c      	adds	r3, #12
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <inc_lock+0xe0>
 80027b0:	2300      	movs	r3, #0
 80027b2:	e015      	b.n	80027e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d108      	bne.n	80027cc <inc_lock+0xf8>
 80027ba:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <inc_lock+0x118>)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	4413      	add	r3, r2
 80027c2:	330c      	adds	r3, #12
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	e001      	b.n	80027d0 <inc_lock+0xfc>
 80027cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027d0:	4906      	ldr	r1, [pc, #24]	; (80027ec <inc_lock+0x118>)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	440b      	add	r3, r1
 80027d8:	330c      	adds	r3, #12
 80027da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3301      	adds	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	20003178 	.word	0x20003178

080027f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d825      	bhi.n	8002850 <dec_lock+0x60>
		n = Files[i].ctr;
 8002804:	4a17      	ldr	r2, [pc, #92]	; (8002864 <dec_lock+0x74>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	4413      	add	r3, r2
 800280c:	330c      	adds	r3, #12
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002812:	89fb      	ldrh	r3, [r7, #14]
 8002814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002818:	d101      	bne.n	800281e <dec_lock+0x2e>
 800281a:	2300      	movs	r3, #0
 800281c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800281e:	89fb      	ldrh	r3, [r7, #14]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <dec_lock+0x3a>
 8002824:	89fb      	ldrh	r3, [r7, #14]
 8002826:	3b01      	subs	r3, #1
 8002828:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800282a:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <dec_lock+0x74>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	4413      	add	r3, r2
 8002832:	330c      	adds	r3, #12
 8002834:	89fa      	ldrh	r2, [r7, #14]
 8002836:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002838:	89fb      	ldrh	r3, [r7, #14]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d105      	bne.n	800284a <dec_lock+0x5a>
 800283e:	4a09      	ldr	r2, [pc, #36]	; (8002864 <dec_lock+0x74>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	4413      	add	r3, r2
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	737b      	strb	r3, [r7, #13]
 800284e:	e001      	b.n	8002854 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002850:	2302      	movs	r3, #2
 8002852:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002854:	7b7b      	ldrb	r3, [r7, #13]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20003178 	.word	0x20003178

08002868 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e010      	b.n	8002898 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002876:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <clear_lock+0x44>)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	4413      	add	r3, r2
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	429a      	cmp	r2, r3
 8002884:	d105      	bne.n	8002892 <clear_lock+0x2a>
 8002886:	4a09      	ldr	r2, [pc, #36]	; (80028ac <clear_lock+0x44>)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	4413      	add	r3, r2
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3301      	adds	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d9eb      	bls.n	8002876 <clear_lock+0xe>
	}
}
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	20003178 	.word	0x20003178

080028b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	78db      	ldrb	r3, [r3, #3]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d034      	beq.n	800292e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7858      	ldrb	r0, [r3, #1]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80028d4:	2301      	movs	r3, #1
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	f7ff fd40 	bl	800235c <disk_write>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	e022      	b.n	800292e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	1ad2      	subs	r2, r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d217      	bcs.n	800292e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	789b      	ldrb	r3, [r3, #2]
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e010      	b.n	8002928 <sync_window+0x78>
					wsect += fs->fsize;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4413      	add	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7858      	ldrb	r0, [r3, #1]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800291a:	2301      	movs	r3, #1
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	f7ff fd1d 	bl	800235c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	3b01      	subs	r3, #1
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d8eb      	bhi.n	8002906 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d01b      	beq.n	8002988 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ffad 	bl	80028b0 <sync_window>
 8002956:	4603      	mov	r3, r0
 8002958:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d113      	bne.n	8002988 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7858      	ldrb	r0, [r3, #1]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800296a:	2301      	movs	r3, #1
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	f7ff fcd5 	bl	800231c <disk_read>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
 800297c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff87 	bl	80028b0 <sync_window>
 80029a2:	4603      	mov	r3, r0
 80029a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d159      	bne.n	8002a60 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d149      	bne.n	8002a48 <sync_fs+0xb4>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	791b      	ldrb	r3, [r3, #4]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d145      	bne.n	8002a48 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	899b      	ldrh	r3, [r3, #12]
 80029c6:	461a      	mov	r2, r3
 80029c8:	2100      	movs	r1, #0
 80029ca:	f7ff fda8 	bl	800251e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3334      	adds	r3, #52	; 0x34
 80029d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80029d6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fd37 	bl	800244e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3334      	adds	r3, #52	; 0x34
 80029e4:	4921      	ldr	r1, [pc, #132]	; (8002a6c <sync_fs+0xd8>)
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fd4c 	bl	8002484 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3334      	adds	r3, #52	; 0x34
 80029f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80029f4:	491e      	ldr	r1, [pc, #120]	; (8002a70 <sync_fs+0xdc>)
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fd44 	bl	8002484 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3334      	adds	r3, #52	; 0x34
 8002a00:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	f7ff fd3a 	bl	8002484 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3334      	adds	r3, #52	; 0x34
 8002a14:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f7ff fd30 	bl	8002484 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	7858      	ldrb	r0, [r3, #1]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f7ff fc8d 	bl	800235c <disk_write>
			fs->fsi_flag = 0;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fca3 	bl	800239c <disk_ioctl>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <sync_fs+0xcc>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	41615252 	.word	0x41615252
 8002a70:	61417272 	.word	0x61417272

08002a74 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	3b02      	subs	r3, #2
 8002a82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	3b02      	subs	r3, #2
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d301      	bcc.n	8002a94 <clust2sect+0x20>
 8002a90:	2300      	movs	r3, #0
 8002a92:	e008      	b.n	8002aa6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	895b      	ldrh	r3, [r3, #10]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	fb03 f202 	mul.w	r2, r3, r2
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	4413      	add	r3, r2
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d904      	bls.n	8002ad2 <get_fat+0x20>
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d302      	bcc.n	8002ad8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	e0bb      	b.n	8002c50 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8002adc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	f000 8083 	beq.w	8002bee <get_fat+0x13c>
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	f300 80a7 	bgt.w	8002c3c <get_fat+0x18a>
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d002      	beq.n	8002af8 <get_fat+0x46>
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d056      	beq.n	8002ba4 <get_fat+0xf2>
 8002af6:	e0a1      	b.n	8002c3c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	085b      	lsrs	r3, r3, #1
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4413      	add	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	899b      	ldrh	r3, [r3, #12]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b16:	4413      	add	r3, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6938      	ldr	r0, [r7, #16]
 8002b1c:	f7ff ff0c 	bl	8002938 <move_window>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 808d 	bne.w	8002c42 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	60fa      	str	r2, [r7, #12]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	8992      	ldrh	r2, [r2, #12]
 8002b32:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b36:	fb01 f202 	mul.w	r2, r1, r2
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b44:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	899b      	ldrh	r3, [r3, #12]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b56:	4413      	add	r3, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	6938      	ldr	r0, [r7, #16]
 8002b5c:	f7ff feec 	bl	8002938 <move_window>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d16f      	bne.n	8002c46 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	899b      	ldrh	r3, [r3, #12]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b72:	fb01 f202 	mul.w	r2, r1, r2
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	461a      	mov	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <get_fat+0xe8>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	e002      	b.n	8002ba0 <get_fat+0xee>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba0:	617b      	str	r3, [r7, #20]
			break;
 8002ba2:	e055      	b.n	8002c50 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	899b      	ldrh	r3, [r3, #12]
 8002bac:	085b      	lsrs	r3, r3, #1
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb8:	4413      	add	r3, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6938      	ldr	r0, [r7, #16]
 8002bbe:	f7ff febb 	bl	8002938 <move_window>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d140      	bne.n	8002c4a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	8992      	ldrh	r2, [r2, #12]
 8002bd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8002bda:	fb00 f202 	mul.w	r2, r0, r2
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fbf8 	bl	80023d8 <ld_word>
 8002be8:	4603      	mov	r3, r0
 8002bea:	617b      	str	r3, [r7, #20]
			break;
 8002bec:	e030      	b.n	8002c50 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	899b      	ldrh	r3, [r3, #12]
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c02:	4413      	add	r3, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	6938      	ldr	r0, [r7, #16]
 8002c08:	f7ff fe96 	bl	8002938 <move_window>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d11d      	bne.n	8002c4e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	8992      	ldrh	r2, [r2, #12]
 8002c20:	fbb3 f0f2 	udiv	r0, r3, r2
 8002c24:	fb00 f202 	mul.w	r2, r0, r2
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fbeb 	bl	8002408 <ld_dword>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c38:	617b      	str	r3, [r7, #20]
			break;
 8002c3a:	e009      	b.n	8002c50 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	e006      	b.n	8002c50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002c42:	bf00      	nop
 8002c44:	e004      	b.n	8002c50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002c4e:	bf00      	nop
		}
	}

	return val;
 8002c50:	697b      	ldr	r3, [r7, #20]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8002c5a:	b590      	push	{r4, r7, lr}
 8002c5c:	b089      	sub	sp, #36	; 0x24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002c66:	2302      	movs	r3, #2
 8002c68:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	f240 8102 	bls.w	8002e76 <put_fat+0x21c>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	f080 80fc 	bcs.w	8002e76 <put_fat+0x21c>
		switch (fs->fs_type) {
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	f000 80b6 	beq.w	8002df4 <put_fat+0x19a>
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	f300 80fd 	bgt.w	8002e88 <put_fat+0x22e>
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d003      	beq.n	8002c9a <put_fat+0x40>
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	f000 8083 	beq.w	8002d9e <put_fat+0x144>
 8002c98:	e0f6      	b.n	8002e88 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	085b      	lsrs	r3, r3, #1
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	899b      	ldrh	r3, [r3, #12]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cb8:	4413      	add	r3, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7ff fe3b 	bl	8002938 <move_window>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002cc6:	7ffb      	ldrb	r3, [r7, #31]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f040 80d6 	bne.w	8002e7a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	61ba      	str	r2, [r7, #24]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	8992      	ldrh	r2, [r2, #12]
 8002cde:	fbb3 f0f2 	udiv	r0, r3, r2
 8002ce2:	fb00 f202 	mul.w	r2, r0, r2
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	440b      	add	r3, r1
 8002cea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <put_fat+0xb8>
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	b25b      	sxtb	r3, r3
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	b25a      	sxtb	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	b25b      	sxtb	r3, r3
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	b25b      	sxtb	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	e001      	b.n	8002d16 <put_fat+0xbc>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	899b      	ldrh	r3, [r3, #12]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d30:	4413      	add	r3, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7ff fdff 	bl	8002938 <move_window>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002d3e:	7ffb      	ldrb	r3, [r7, #31]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f040 809c 	bne.w	8002e7e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	899b      	ldrh	r3, [r3, #12]
 8002d50:	461a      	mov	r2, r3
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	fbb3 f0f2 	udiv	r0, r3, r2
 8002d58:	fb00 f202 	mul.w	r2, r0, r2
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <put_fat+0x11a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e00e      	b.n	8002d92 <put_fat+0x138>
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b25b      	sxtb	r3, r3
 8002d7a:	f023 030f 	bic.w	r3, r3, #15
 8002d7e:	b25a      	sxtb	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	b25b      	sxtb	r3, r3
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	b25b      	sxtb	r3, r3
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	b25b      	sxtb	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	70da      	strb	r2, [r3, #3]
			break;
 8002d9c:	e074      	b.n	8002e88 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	899b      	ldrh	r3, [r3, #12]
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	4619      	mov	r1, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002db2:	4413      	add	r3, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f7ff fdbe 	bl	8002938 <move_window>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002dc0:	7ffb      	ldrb	r3, [r7, #31]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d15d      	bne.n	8002e82 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	8992      	ldrh	r2, [r2, #12]
 8002dd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8002dd8:	fb00 f202 	mul.w	r2, r0, r2
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	440b      	add	r3, r1
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	b292      	uxth	r2, r2
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fb31 	bl	800244e <st_word>
			fs->wflag = 1;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	70da      	strb	r2, [r3, #3]
			break;
 8002df2:	e049      	b.n	8002e88 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	899b      	ldrh	r3, [r3, #12]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	4619      	mov	r1, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e08:	4413      	add	r3, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff fd93 	bl	8002938 <move_window>
 8002e12:	4603      	mov	r3, r0
 8002e14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002e16:	7ffb      	ldrb	r3, [r7, #31]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d134      	bne.n	8002e86 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	8992      	ldrh	r2, [r2, #12]
 8002e30:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e34:	fb00 f202 	mul.w	r2, r0, r2
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fae3 	bl	8002408 <ld_dword>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002e48:	4323      	orrs	r3, r4
 8002e4a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	8992      	ldrh	r2, [r2, #12]
 8002e5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e5e:	fb00 f202 	mul.w	r2, r0, r2
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	440b      	add	r3, r1
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fb0b 	bl	8002484 <st_dword>
			fs->wflag = 1;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	70da      	strb	r2, [r3, #3]
			break;
 8002e74:	e008      	b.n	8002e88 <put_fat+0x22e>
		}
	}
 8002e76:	bf00      	nop
 8002e78:	e006      	b.n	8002e88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8002e7a:	bf00      	nop
 8002e7c:	e004      	b.n	8002e88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8002e7e:	bf00      	nop
 8002e80:	e002      	b.n	8002e88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8002e82:	bf00      	nop
 8002e84:	e000      	b.n	8002e88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8002e86:	bf00      	nop
	return res;
 8002e88:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3724      	adds	r7, #36	; 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd90      	pop	{r4, r7, pc}

08002e92 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b088      	sub	sp, #32
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d904      	bls.n	8002eb8 <remove_chain+0x26>
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d301      	bcc.n	8002ebc <remove_chain+0x2a>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e04b      	b.n	8002f54 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00c      	beq.n	8002edc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	69b8      	ldr	r0, [r7, #24]
 8002eca:	f7ff fec6 	bl	8002c5a <put_fat>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8002ed2:	7ffb      	ldrb	r3, [r7, #31]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <remove_chain+0x4a>
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
 8002eda:	e03b      	b.n	8002f54 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff fde7 	bl	8002ab2 <get_fat>
 8002ee4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d031      	beq.n	8002f50 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <remove_chain+0x64>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e02e      	b.n	8002f54 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d101      	bne.n	8002f02 <remove_chain+0x70>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e028      	b.n	8002f54 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002f02:	2200      	movs	r2, #0
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	69b8      	ldr	r0, [r7, #24]
 8002f08:	f7ff fea7 	bl	8002c5a <put_fat>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002f10:	7ffb      	ldrb	r3, [r7, #31]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <remove_chain+0x88>
 8002f16:	7ffb      	ldrb	r3, [r7, #31]
 8002f18:	e01c      	b.n	8002f54 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	3b02      	subs	r3, #2
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d20b      	bcs.n	8002f40 <remove_chain+0xae>
			fs->free_clst++;
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	791b      	ldrb	r3, [r3, #4]
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d3c6      	bcc.n	8002edc <remove_chain+0x4a>
 8002f4e:	e000      	b.n	8002f52 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002f50:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10d      	bne.n	8002f8e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d004      	beq.n	8002f88 <create_chain+0x2c>
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d31b      	bcc.n	8002fc0 <create_chain+0x64>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	e018      	b.n	8002fc0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002f8e:	6839      	ldr	r1, [r7, #0]
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fd8e 	bl	8002ab2 <get_fat>
 8002f96:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d801      	bhi.n	8002fa2 <create_chain+0x46>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e070      	b.n	8003084 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d101      	bne.n	8002fae <create_chain+0x52>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	e06a      	b.n	8003084 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d201      	bcs.n	8002fbc <create_chain+0x60>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	e063      	b.n	8003084 <create_chain+0x128>
		scl = clst;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d307      	bcc.n	8002fe4 <create_chain+0x88>
				ncl = 2;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d901      	bls.n	8002fe4 <create_chain+0x88>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e04f      	b.n	8003084 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002fe4:	69f9      	ldr	r1, [r7, #28]
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff fd63 	bl	8002ab2 <get_fat>
 8002fec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00e      	beq.n	8003012 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d003      	beq.n	8003002 <create_chain+0xa6>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d101      	bne.n	8003006 <create_chain+0xaa>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	e03e      	b.n	8003084 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	429a      	cmp	r2, r3
 800300c:	d1da      	bne.n	8002fc4 <create_chain+0x68>
 800300e:	2300      	movs	r3, #0
 8003010:	e038      	b.n	8003084 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003012:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69f9      	ldr	r1, [r7, #28]
 800301a:	6938      	ldr	r0, [r7, #16]
 800301c:	f7ff fe1d 	bl	8002c5a <put_fat>
 8003020:	4603      	mov	r3, r0
 8003022:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003024:	7dfb      	ldrb	r3, [r7, #23]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <create_chain+0xe2>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d006      	beq.n	800303e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	6839      	ldr	r1, [r7, #0]
 8003034:	6938      	ldr	r0, [r7, #16]
 8003036:	f7ff fe10 	bl	8002c5a <put_fat>
 800303a:	4603      	mov	r3, r0
 800303c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d116      	bne.n	8003072 <create_chain+0x116>
		fs->last_clst = ncl;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	3b02      	subs	r3, #2
 8003054:	429a      	cmp	r2, r3
 8003056:	d804      	bhi.n	8003062 <create_chain+0x106>
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	1e5a      	subs	r2, r3, #1
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	791b      	ldrb	r3, [r3, #4]
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	b2da      	uxtb	r2, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	711a      	strb	r2, [r3, #4]
 8003070:	e007      	b.n	8003082 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d102      	bne.n	800307e <create_chain+0x122>
 8003078:	f04f 33ff 	mov.w	r3, #4294967295
 800307c:	e000      	b.n	8003080 <create_chain+0x124>
 800307e:	2301      	movs	r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003082:	69fb      	ldr	r3, [r7, #28]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3720      	adds	r7, #32
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	3304      	adds	r3, #4
 80030a2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	899b      	ldrh	r3, [r3, #12]
 80030a8:	461a      	mov	r2, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	8952      	ldrh	r2, [r2, #10]
 80030b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1d1a      	adds	r2, r3, #4
 80030be:	613a      	str	r2, [r7, #16]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <clmt_clust+0x42>
 80030ca:	2300      	movs	r3, #0
 80030cc:	e010      	b.n	80030f0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d307      	bcc.n	80030e6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	3304      	adds	r3, #4
 80030e2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80030e4:	e7e9      	b.n	80030ba <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80030e6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	4413      	add	r3, r2
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003112:	d204      	bcs.n	800311e <dir_sdi+0x22>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <dir_sdi+0x26>
		return FR_INT_ERR;
 800311e:	2302      	movs	r3, #2
 8003120:	e071      	b.n	8003206 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <dir_sdi+0x46>
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d902      	bls.n	8003142 <dir_sdi+0x46>
		clst = fs->dirbase;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10c      	bne.n	8003162 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	8912      	ldrh	r2, [r2, #8]
 8003150:	4293      	cmp	r3, r2
 8003152:	d301      	bcc.n	8003158 <dir_sdi+0x5c>
 8003154:	2302      	movs	r3, #2
 8003156:	e056      	b.n	8003206 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	61da      	str	r2, [r3, #28]
 8003160:	e02d      	b.n	80031be <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	895b      	ldrh	r3, [r3, #10]
 8003166:	461a      	mov	r2, r3
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	899b      	ldrh	r3, [r3, #12]
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003172:	e019      	b.n	80031a8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6979      	ldr	r1, [r7, #20]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fc9a 	bl	8002ab2 <get_fat>
 800317e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003186:	d101      	bne.n	800318c <dir_sdi+0x90>
 8003188:	2301      	movs	r3, #1
 800318a:	e03c      	b.n	8003206 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d904      	bls.n	800319c <dir_sdi+0xa0>
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	d301      	bcc.n	80031a0 <dir_sdi+0xa4>
 800319c:	2302      	movs	r3, #2
 800319e:	e032      	b.n	8003206 <dir_sdi+0x10a>
			ofs -= csz;
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d2e1      	bcs.n	8003174 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80031b0:	6979      	ldr	r1, [r7, #20]
 80031b2:	6938      	ldr	r0, [r7, #16]
 80031b4:	f7ff fc5e 	bl	8002a74 <clust2sect>
 80031b8:	4602      	mov	r2, r0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <dir_sdi+0xd4>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e01a      	b.n	8003206 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	899b      	ldrh	r3, [r3, #12]
 80031d8:	4619      	mov	r1, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80031e0:	441a      	add	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	899b      	ldrh	r3, [r3, #12]
 80031f0:	461a      	mov	r2, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80031f8:	fb00 f202 	mul.w	r2, r0, r2
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	18ca      	adds	r2, r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	3320      	adds	r3, #32
 8003224:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <dir_next+0x28>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003234:	d301      	bcc.n	800323a <dir_next+0x2c>
 8003236:	2304      	movs	r3, #4
 8003238:	e0bb      	b.n	80033b2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	899b      	ldrh	r3, [r3, #12]
 800323e:	461a      	mov	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	fbb3 f1f2 	udiv	r1, r3, r2
 8003246:	fb01 f202 	mul.w	r2, r1, r2
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 809d 	bne.w	800338c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10b      	bne.n	800327c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	8912      	ldrh	r2, [r2, #8]
 800326c:	4293      	cmp	r3, r2
 800326e:	f0c0 808d 	bcc.w	800338c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	61da      	str	r2, [r3, #28]
 8003278:	2304      	movs	r3, #4
 800327a:	e09a      	b.n	80033b2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	899b      	ldrh	r3, [r3, #12]
 8003280:	461a      	mov	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	fbb3 f3f2 	udiv	r3, r3, r2
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	8952      	ldrh	r2, [r2, #10]
 800328c:	3a01      	subs	r2, #1
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d17b      	bne.n	800338c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f7ff fc08 	bl	8002ab2 <get_fat>
 80032a2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d801      	bhi.n	80032ae <dir_next+0xa0>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e081      	b.n	80033b2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d101      	bne.n	80032ba <dir_next+0xac>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e07b      	b.n	80033b2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d359      	bcc.n	8003378 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d104      	bne.n	80032d4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	61da      	str	r2, [r3, #28]
 80032d0:	2304      	movs	r3, #4
 80032d2:	e06e      	b.n	80033b2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f7ff fe3d 	bl	8002f5c <create_chain>
 80032e2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <dir_next+0xe0>
 80032ea:	2307      	movs	r3, #7
 80032ec:	e061      	b.n	80033b2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <dir_next+0xea>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e05c      	b.n	80033b2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fe:	d101      	bne.n	8003304 <dir_next+0xf6>
 8003300:	2301      	movs	r3, #1
 8003302:	e056      	b.n	80033b2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f7ff fad3 	bl	80028b0 <sync_window>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <dir_next+0x106>
 8003310:	2301      	movs	r3, #1
 8003312:	e04e      	b.n	80033b2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	899b      	ldrh	r3, [r3, #12]
 800331e:	461a      	mov	r2, r3
 8003320:	2100      	movs	r1, #0
 8003322:	f7ff f8fc 	bl	800251e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	6979      	ldr	r1, [r7, #20]
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff fba1 	bl	8002a74 <clust2sect>
 8003332:	4602      	mov	r2, r0
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
 8003338:	e012      	b.n	8003360 <dir_next+0x152>
						fs->wflag = 1;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f7ff fab5 	bl	80028b0 <sync_window>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <dir_next+0x142>
 800334c:	2301      	movs	r3, #1
 800334e:	e030      	b.n	80033b2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	3301      	adds	r3, #1
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	895b      	ldrh	r3, [r3, #10]
 8003364:	461a      	mov	r2, r3
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4293      	cmp	r3, r2
 800336a:	d3e6      	bcc.n	800333a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad2      	subs	r2, r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800337e:	6979      	ldr	r1, [r7, #20]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7ff fb77 	bl	8002a74 <clust2sect>
 8003386:	4602      	mov	r2, r0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	899b      	ldrh	r3, [r3, #12]
 800339c:	461a      	mov	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80033a4:	fb00 f202 	mul.w	r2, r0, r2
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	18ca      	adds	r2, r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b086      	sub	sp, #24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80033ca:	2100      	movs	r1, #0
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff fe95 	bl	80030fc <dir_sdi>
 80033d2:	4603      	mov	r3, r0
 80033d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d12b      	bne.n	8003434 <dir_alloc+0x7a>
		n = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	4619      	mov	r1, r3
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f7ff faa6 	bl	8002938 <move_window>
 80033ec:	4603      	mov	r3, r0
 80033ee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d11d      	bne.n	8003432 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2be5      	cmp	r3, #229	; 0xe5
 80033fe:	d004      	beq.n	800340a <dir_alloc+0x50>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d107      	bne.n	800341a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	3301      	adds	r3, #1
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d102      	bne.n	800341e <dir_alloc+0x64>
 8003418:	e00c      	b.n	8003434 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800341e:	2101      	movs	r1, #1
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff fef4 	bl	800320e <dir_next>
 8003426:	4603      	mov	r3, r0
 8003428:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800342a:	7dfb      	ldrb	r3, [r7, #23]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0d7      	beq.n	80033e0 <dir_alloc+0x26>
 8003430:	e000      	b.n	8003434 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003432:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003434:	7dfb      	ldrb	r3, [r7, #23]
 8003436:	2b04      	cmp	r3, #4
 8003438:	d101      	bne.n	800343e <dir_alloc+0x84>
 800343a:	2307      	movs	r3, #7
 800343c:	75fb      	strb	r3, [r7, #23]
	return res;
 800343e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	331a      	adds	r3, #26
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe ffbe 	bl	80023d8 <ld_word>
 800345c:	4603      	mov	r3, r0
 800345e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b03      	cmp	r3, #3
 8003466:	d109      	bne.n	800347c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	3314      	adds	r3, #20
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe ffb3 	bl	80023d8 <ld_word>
 8003472:	4603      	mov	r3, r0
 8003474:	041b      	lsls	r3, r3, #16
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800347c:	68fb      	ldr	r3, [r7, #12]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	331a      	adds	r3, #26
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	b292      	uxth	r2, r2
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe ffd6 	bl	800244e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d109      	bne.n	80034be <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f103 0214 	add.w	r2, r3, #20
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	0c1b      	lsrs	r3, r3, #16
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f7fe ffc8 	bl	800244e <st_word>
	}
}
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b086      	sub	sp, #24
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80034d4:	2100      	movs	r1, #0
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff fe10 	bl	80030fc <dir_sdi>
 80034dc:	4603      	mov	r3, r0
 80034de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <dir_find+0x24>
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	e03e      	b.n	8003568 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	4619      	mov	r1, r3
 80034f0:	6938      	ldr	r0, [r7, #16]
 80034f2:	f7ff fa21 	bl	8002938 <move_window>
 80034f6:	4603      	mov	r3, r0
 80034f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d12f      	bne.n	8003560 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d102      	bne.n	8003514 <dir_find+0x4e>
 800350e:	2304      	movs	r3, #4
 8003510:	75fb      	strb	r3, [r7, #23]
 8003512:	e028      	b.n	8003566 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	330b      	adds	r3, #11
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003520:	b2da      	uxtb	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	330b      	adds	r3, #11
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <dir_find+0x86>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a18      	ldr	r0, [r3, #32]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3324      	adds	r3, #36	; 0x24
 800353e:	220b      	movs	r2, #11
 8003540:	4619      	mov	r1, r3
 8003542:	f7ff f807 	bl	8002554 <mem_cmp>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00b      	beq.n	8003564 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800354c:	2100      	movs	r1, #0
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff fe5d 	bl	800320e <dir_next>
 8003554:	4603      	mov	r3, r0
 8003556:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003558:	7dfb      	ldrb	r3, [r7, #23]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0c5      	beq.n	80034ea <dir_find+0x24>
 800355e:	e002      	b.n	8003566 <dir_find+0xa0>
		if (res != FR_OK) break;
 8003560:	bf00      	nop
 8003562:	e000      	b.n	8003566 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003564:	bf00      	nop

	return res;
 8003566:	7dfb      	ldrb	r3, [r7, #23]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800357e:	2101      	movs	r1, #1
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ff1a 	bl	80033ba <dir_alloc>
 8003586:	4603      	mov	r3, r0
 8003588:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d11c      	bne.n	80035ca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4619      	mov	r1, r3
 8003596:	68b8      	ldr	r0, [r7, #8]
 8003598:	f7ff f9ce 	bl	8002938 <move_window>
 800359c:	4603      	mov	r3, r0
 800359e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d111      	bne.n	80035ca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	2220      	movs	r2, #32
 80035ac:	2100      	movs	r1, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe ffb5 	bl	800251e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a18      	ldr	r0, [r3, #32]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3324      	adds	r3, #36	; 0x24
 80035bc:	220b      	movs	r2, #11
 80035be:	4619      	mov	r1, r3
 80035c0:	f7fe ff8c 	bl	80024dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2201      	movs	r2, #1
 80035c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3324      	adds	r3, #36	; 0x24
 80035e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80035ea:	220b      	movs	r2, #11
 80035ec:	2120      	movs	r1, #32
 80035ee:	68b8      	ldr	r0, [r7, #8]
 80035f0:	f7fe ff95 	bl	800251e <mem_set>
	si = i = 0; ni = 8;
 80035f4:	2300      	movs	r3, #0
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	61fb      	str	r3, [r7, #28]
 80035fc:	2308      	movs	r3, #8
 80035fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	61fa      	str	r2, [r7, #28]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4413      	add	r3, r2
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800360e:	7efb      	ldrb	r3, [r7, #27]
 8003610:	2b20      	cmp	r3, #32
 8003612:	d94e      	bls.n	80036b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003614:	7efb      	ldrb	r3, [r7, #27]
 8003616:	2b2f      	cmp	r3, #47	; 0x2f
 8003618:	d006      	beq.n	8003628 <create_name+0x54>
 800361a:	7efb      	ldrb	r3, [r7, #27]
 800361c:	2b5c      	cmp	r3, #92	; 0x5c
 800361e:	d110      	bne.n	8003642 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003620:	e002      	b.n	8003628 <create_name+0x54>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3301      	adds	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b2f      	cmp	r3, #47	; 0x2f
 8003632:	d0f6      	beq.n	8003622 <create_name+0x4e>
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b5c      	cmp	r3, #92	; 0x5c
 800363e:	d0f0      	beq.n	8003622 <create_name+0x4e>
			break;
 8003640:	e038      	b.n	80036b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8003642:	7efb      	ldrb	r3, [r7, #27]
 8003644:	2b2e      	cmp	r3, #46	; 0x2e
 8003646:	d003      	beq.n	8003650 <create_name+0x7c>
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	429a      	cmp	r2, r3
 800364e:	d30c      	bcc.n	800366a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b0b      	cmp	r3, #11
 8003654:	d002      	beq.n	800365c <create_name+0x88>
 8003656:	7efb      	ldrb	r3, [r7, #27]
 8003658:	2b2e      	cmp	r3, #46	; 0x2e
 800365a:	d001      	beq.n	8003660 <create_name+0x8c>
 800365c:	2306      	movs	r3, #6
 800365e:	e044      	b.n	80036ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8003660:	2308      	movs	r3, #8
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	230b      	movs	r3, #11
 8003666:	617b      	str	r3, [r7, #20]
			continue;
 8003668:	e022      	b.n	80036b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800366a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800366e:	2b00      	cmp	r3, #0
 8003670:	da04      	bge.n	800367c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003672:	7efb      	ldrb	r3, [r7, #27]
 8003674:	3b80      	subs	r3, #128	; 0x80
 8003676:	4a1f      	ldr	r2, [pc, #124]	; (80036f4 <create_name+0x120>)
 8003678:	5cd3      	ldrb	r3, [r2, r3]
 800367a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800367c:	7efb      	ldrb	r3, [r7, #27]
 800367e:	4619      	mov	r1, r3
 8003680:	481d      	ldr	r0, [pc, #116]	; (80036f8 <create_name+0x124>)
 8003682:	f7fe ff8e 	bl	80025a2 <chk_chr>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <create_name+0xbc>
 800368c:	2306      	movs	r3, #6
 800368e:	e02c      	b.n	80036ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003690:	7efb      	ldrb	r3, [r7, #27]
 8003692:	2b60      	cmp	r3, #96	; 0x60
 8003694:	d905      	bls.n	80036a2 <create_name+0xce>
 8003696:	7efb      	ldrb	r3, [r7, #27]
 8003698:	2b7a      	cmp	r3, #122	; 0x7a
 800369a:	d802      	bhi.n	80036a2 <create_name+0xce>
 800369c:	7efb      	ldrb	r3, [r7, #27]
 800369e:	3b20      	subs	r3, #32
 80036a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	613a      	str	r2, [r7, #16]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	4413      	add	r3, r2
 80036ac:	7efa      	ldrb	r2, [r7, #27]
 80036ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80036b0:	e7a6      	b.n	8003600 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80036b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	441a      	add	r2, r3
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <create_name+0xf4>
 80036c4:	2306      	movs	r3, #6
 80036c6:	e010      	b.n	80036ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2be5      	cmp	r3, #229	; 0xe5
 80036ce:	d102      	bne.n	80036d6 <create_name+0x102>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2205      	movs	r2, #5
 80036d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80036d6:	7efb      	ldrb	r3, [r7, #27]
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d801      	bhi.n	80036e0 <create_name+0x10c>
 80036dc:	2204      	movs	r2, #4
 80036de:	e000      	b.n	80036e2 <create_name+0x10e>
 80036e0:	2200      	movs	r2, #0
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	330b      	adds	r3, #11
 80036e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80036e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	08005410 	.word	0x08005410
 80036f8:	080053bc 	.word	0x080053bc

080036fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003710:	e002      	b.n	8003718 <follow_path+0x1c>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	3301      	adds	r3, #1
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b2f      	cmp	r3, #47	; 0x2f
 800371e:	d0f8      	beq.n	8003712 <follow_path+0x16>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b5c      	cmp	r3, #92	; 0x5c
 8003726:	d0f4      	beq.n	8003712 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b1f      	cmp	r3, #31
 8003734:	d80a      	bhi.n	800374c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800373e:	2100      	movs	r1, #0
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff fcdb 	bl	80030fc <dir_sdi>
 8003746:	4603      	mov	r3, r0
 8003748:	75fb      	strb	r3, [r7, #23]
 800374a:	e048      	b.n	80037de <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800374c:	463b      	mov	r3, r7
 800374e:	4619      	mov	r1, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ff3f 	bl	80035d4 <create_name>
 8003756:	4603      	mov	r3, r0
 8003758:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d139      	bne.n	80037d4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff feb0 	bl	80034c6 <dir_find>
 8003766:	4603      	mov	r3, r0
 8003768:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003770:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	2b04      	cmp	r3, #4
 800377c:	d12c      	bne.n	80037d8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800377e:	7afb      	ldrb	r3, [r7, #11]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d127      	bne.n	80037d8 <follow_path+0xdc>
 8003788:	2305      	movs	r3, #5
 800378a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800378c:	e024      	b.n	80037d8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800378e:	7afb      	ldrb	r3, [r7, #11]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d121      	bne.n	80037dc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	799b      	ldrb	r3, [r3, #6]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80037a4:	2305      	movs	r3, #5
 80037a6:	75fb      	strb	r3, [r7, #23]
 80037a8:	e019      	b.n	80037de <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	8992      	ldrh	r2, [r2, #12]
 80037b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80037bc:	fb00 f202 	mul.w	r2, r0, r2
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	440b      	add	r3, r1
 80037c4:	4619      	mov	r1, r3
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7ff fe3e 	bl	8003448 <ld_clust>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80037d2:	e7bb      	b.n	800374c <follow_path+0x50>
			if (res != FR_OK) break;
 80037d4:	bf00      	nop
 80037d6:	e002      	b.n	80037de <follow_path+0xe2>
				break;
 80037d8:	bf00      	nop
 80037da:	e000      	b.n	80037de <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80037dc:	bf00      	nop
			}
		}
	}

	return res;
 80037de:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80037f0:	f04f 33ff 	mov.w	r3, #4294967295
 80037f4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d031      	beq.n	8003862 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	e002      	b.n	800380c <get_ldnumber+0x24>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	3301      	adds	r3, #1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b20      	cmp	r3, #32
 8003812:	d903      	bls.n	800381c <get_ldnumber+0x34>
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b3a      	cmp	r3, #58	; 0x3a
 800381a:	d1f4      	bne.n	8003806 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b3a      	cmp	r3, #58	; 0x3a
 8003822:	d11c      	bne.n	800385e <get_ldnumber+0x76>
			tp = *path;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	60fa      	str	r2, [r7, #12]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	3b30      	subs	r3, #48	; 0x30
 8003834:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b09      	cmp	r3, #9
 800383a:	d80e      	bhi.n	800385a <get_ldnumber+0x72>
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	429a      	cmp	r2, r3
 8003842:	d10a      	bne.n	800385a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d107      	bne.n	800385a <get_ldnumber+0x72>
					vol = (int)i;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	3301      	adds	r3, #1
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	e002      	b.n	8003864 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003862:	693b      	ldr	r3, [r7, #16]
}
 8003864:	4618      	mov	r0, r3
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	70da      	strb	r2, [r3, #3]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f04f 32ff 	mov.w	r2, #4294967295
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff f854 	bl	8002938 <move_window>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <check_fs+0x2a>
 8003896:	2304      	movs	r3, #4
 8003898:	e038      	b.n	800390c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3334      	adds	r3, #52	; 0x34
 800389e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fd98 	bl	80023d8 <ld_word>
 80038a8:	4603      	mov	r3, r0
 80038aa:	461a      	mov	r2, r3
 80038ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <check_fs+0x48>
 80038b4:	2303      	movs	r3, #3
 80038b6:	e029      	b.n	800390c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038be:	2be9      	cmp	r3, #233	; 0xe9
 80038c0:	d009      	beq.n	80038d6 <check_fs+0x66>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038c8:	2beb      	cmp	r3, #235	; 0xeb
 80038ca:	d11e      	bne.n	800390a <check_fs+0x9a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80038d2:	2b90      	cmp	r3, #144	; 0x90
 80038d4:	d119      	bne.n	800390a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3334      	adds	r3, #52	; 0x34
 80038da:	3336      	adds	r3, #54	; 0x36
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe fd93 	bl	8002408 <ld_dword>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80038e8:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <check_fs+0xa4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <check_fs+0x82>
 80038ee:	2300      	movs	r3, #0
 80038f0:	e00c      	b.n	800390c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3334      	adds	r3, #52	; 0x34
 80038f6:	3352      	adds	r3, #82	; 0x52
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fd85 	bl	8002408 <ld_dword>
 80038fe:	4603      	mov	r3, r0
 8003900:	4a05      	ldr	r2, [pc, #20]	; (8003918 <check_fs+0xa8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <check_fs+0x9a>
 8003906:	2300      	movs	r3, #0
 8003908:	e000      	b.n	800390c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800390a:	2302      	movs	r3, #2
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	00544146 	.word	0x00544146
 8003918:	33544146 	.word	0x33544146

0800391c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b096      	sub	sp, #88	; 0x58
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	4613      	mov	r3, r2
 8003928:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff ff59 	bl	80037e8 <get_ldnumber>
 8003936:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393a:	2b00      	cmp	r3, #0
 800393c:	da01      	bge.n	8003942 <find_volume+0x26>
 800393e:	230b      	movs	r3, #11
 8003940:	e262      	b.n	8003e08 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003942:	4a9f      	ldr	r2, [pc, #636]	; (8003bc0 <find_volume+0x2a4>)
 8003944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <find_volume+0x3a>
 8003952:	230c      	movs	r3, #12
 8003954:	e258      	b.n	8003e08 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800395a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	f023 0301 	bic.w	r3, r3, #1
 8003962:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01a      	beq.n	80039a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fc93 	bl	800229c <disk_status>
 8003976:	4603      	mov	r3, r0
 8003978:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800397c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10c      	bne.n	80039a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <find_volume+0x82>
 800398e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800399a:	230a      	movs	r3, #10
 800399c:	e234      	b.n	8003e08 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800399e:	2300      	movs	r3, #0
 80039a0:	e232      	b.n	8003e08 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80039a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80039a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	785b      	ldrb	r3, [r3, #1]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe fc8b 	bl	80022d0 <disk_initialize>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80039c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80039cc:	2303      	movs	r3, #3
 80039ce:	e21b      	b.n	8003e08 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <find_volume+0xca>
 80039d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80039e2:	230a      	movs	r3, #10
 80039e4:	e210      	b.n	8003e08 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	7858      	ldrb	r0, [r3, #1]
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	330c      	adds	r3, #12
 80039ee:	461a      	mov	r2, r3
 80039f0:	2102      	movs	r1, #2
 80039f2:	f7fe fcd3 	bl	800239c <disk_ioctl>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <find_volume+0xe4>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e203      	b.n	8003e08 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8003a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a02:	899b      	ldrh	r3, [r3, #12]
 8003a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a08:	d80d      	bhi.n	8003a26 <find_volume+0x10a>
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	899b      	ldrh	r3, [r3, #12]
 8003a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a12:	d308      	bcc.n	8003a26 <find_volume+0x10a>
 8003a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a16:	899b      	ldrh	r3, [r3, #12]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1c:	899b      	ldrh	r3, [r3, #12]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <find_volume+0x10e>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e1ee      	b.n	8003e08 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003a2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003a30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a32:	f7ff ff1d 	bl	8003870 <check_fs>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003a3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d149      	bne.n	8003ad8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003a44:	2300      	movs	r3, #0
 8003a46:	643b      	str	r3, [r7, #64]	; 0x40
 8003a48:	e01e      	b.n	8003a88 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003a58:	4413      	add	r3, r2
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	3304      	adds	r3, #4
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <find_volume+0x158>
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	3308      	adds	r3, #8
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fccc 	bl	8002408 <ld_dword>
 8003a70:	4602      	mov	r2, r0
 8003a72:	e000      	b.n	8003a76 <find_volume+0x15a>
 8003a74:	2200      	movs	r2, #0
 8003a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	3358      	adds	r3, #88	; 0x58
 8003a7c:	443b      	add	r3, r7
 8003a7e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a84:	3301      	adds	r3, #1
 8003a86:	643b      	str	r3, [r7, #64]	; 0x40
 8003a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d9dd      	bls.n	8003a4a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8003a8e:	2300      	movs	r3, #0
 8003a90:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8003a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <find_volume+0x182>
 8003a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8003a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	3358      	adds	r3, #88	; 0x58
 8003aa4:	443b      	add	r3, r7
 8003aa6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003aaa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <find_volume+0x1a2>
 8003ab2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003ab4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ab6:	f7ff fedb 	bl	8003870 <check_fs>
 8003aba:	4603      	mov	r3, r0
 8003abc:	e000      	b.n	8003ac0 <find_volume+0x1a4>
 8003abe:	2303      	movs	r3, #3
 8003ac0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003ac4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d905      	bls.n	8003ad8 <find_volume+0x1bc>
 8003acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ace:	3301      	adds	r3, #1
 8003ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d9e2      	bls.n	8003a9e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003ad8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d101      	bne.n	8003ae4 <find_volume+0x1c8>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e191      	b.n	8003e08 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d901      	bls.n	8003af0 <find_volume+0x1d4>
 8003aec:	230d      	movs	r3, #13
 8003aee:	e18b      	b.n	8003e08 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af2:	3334      	adds	r3, #52	; 0x34
 8003af4:	330b      	adds	r3, #11
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe fc6e 	bl	80023d8 <ld_word>
 8003afc:	4603      	mov	r3, r0
 8003afe:	461a      	mov	r2, r3
 8003b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b02:	899b      	ldrh	r3, [r3, #12]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <find_volume+0x1f0>
 8003b08:	230d      	movs	r3, #13
 8003b0a:	e17d      	b.n	8003e08 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0e:	3334      	adds	r3, #52	; 0x34
 8003b10:	3316      	adds	r3, #22
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe fc60 	bl	80023d8 <ld_word>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <find_volume+0x214>
 8003b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b24:	3334      	adds	r3, #52	; 0x34
 8003b26:	3324      	adds	r3, #36	; 0x24
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe fc6d 	bl	8002408 <ld_dword>
 8003b2e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8003b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b34:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b42:	789b      	ldrb	r3, [r3, #2]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d005      	beq.n	8003b54 <find_volume+0x238>
 8003b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4a:	789b      	ldrb	r3, [r3, #2]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d001      	beq.n	8003b54 <find_volume+0x238>
 8003b50:	230d      	movs	r3, #13
 8003b52:	e159      	b.n	8003e08 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b56:	789b      	ldrb	r3, [r3, #2]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5c:	fb02 f303 	mul.w	r3, r2, r3
 8003b60:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b70:	895b      	ldrh	r3, [r3, #10]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <find_volume+0x26c>
 8003b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b78:	895b      	ldrh	r3, [r3, #10]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7e:	895b      	ldrh	r3, [r3, #10]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <find_volume+0x270>
 8003b88:	230d      	movs	r3, #13
 8003b8a:	e13d      	b.n	8003e08 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	3334      	adds	r3, #52	; 0x34
 8003b90:	3311      	adds	r3, #17
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fc20 	bl	80023d8 <ld_word>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba2:	891b      	ldrh	r3, [r3, #8]
 8003ba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ba6:	8992      	ldrh	r2, [r2, #12]
 8003ba8:	0952      	lsrs	r2, r2, #5
 8003baa:	b292      	uxth	r2, r2
 8003bac:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bb0:	fb01 f202 	mul.w	r2, r1, r2
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <find_volume+0x2a8>
 8003bbc:	230d      	movs	r3, #13
 8003bbe:	e123      	b.n	8003e08 <find_volume+0x4ec>
 8003bc0:	20003170 	.word	0x20003170

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8003bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc6:	3334      	adds	r3, #52	; 0x34
 8003bc8:	3313      	adds	r3, #19
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fc04 	bl	80023d8 <ld_word>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <find_volume+0x2cc>
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	3334      	adds	r3, #52	; 0x34
 8003bde:	3320      	adds	r3, #32
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe fc11 	bl	8002408 <ld_dword>
 8003be6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	3334      	adds	r3, #52	; 0x34
 8003bec:	330e      	adds	r3, #14
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fbf2 	bl	80023d8 <ld_word>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003bf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <find_volume+0x2e6>
 8003bfe:	230d      	movs	r3, #13
 8003c00:	e102      	b.n	8003e08 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003c02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c06:	4413      	add	r3, r2
 8003c08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c0a:	8911      	ldrh	r1, [r2, #8]
 8003c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c0e:	8992      	ldrh	r2, [r2, #12]
 8003c10:	0952      	lsrs	r2, r2, #5
 8003c12:	b292      	uxth	r2, r2
 8003c14:	fbb1 f2f2 	udiv	r2, r1, r2
 8003c18:	b292      	uxth	r2, r2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d201      	bcs.n	8003c2a <find_volume+0x30e>
 8003c26:	230d      	movs	r3, #13
 8003c28:	e0ee      	b.n	8003e08 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c32:	8952      	ldrh	r2, [r2, #10]
 8003c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <find_volume+0x328>
 8003c40:	230d      	movs	r3, #13
 8003c42:	e0e1      	b.n	8003e08 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8003c44:	2303      	movs	r3, #3
 8003c46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d802      	bhi.n	8003c5a <find_volume+0x33e>
 8003c54:	2302      	movs	r3, #2
 8003c56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d802      	bhi.n	8003c6a <find_volume+0x34e>
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	1c9a      	adds	r2, r3, #2
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c76:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003c78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c7c:	441a      	add	r2, r3
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8003c82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	441a      	add	r2, r3
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8003c8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d11e      	bne.n	8003cd2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c96:	3334      	adds	r3, #52	; 0x34
 8003c98:	332a      	adds	r3, #42	; 0x2a
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fb9c 	bl	80023d8 <ld_word>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <find_volume+0x38e>
 8003ca6:	230d      	movs	r3, #13
 8003ca8:	e0ae      	b.n	8003e08 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cac:	891b      	ldrh	r3, [r3, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <find_volume+0x39a>
 8003cb2:	230d      	movs	r3, #13
 8003cb4:	e0a8      	b.n	8003e08 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	3334      	adds	r3, #52	; 0x34
 8003cba:	332c      	adds	r3, #44	; 0x2c
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fba3 	bl	8002408 <ld_dword>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd0:	e01f      	b.n	8003d12 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	891b      	ldrh	r3, [r3, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <find_volume+0x3c2>
 8003cda:	230d      	movs	r3, #13
 8003cdc:	e094      	b.n	8003e08 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce4:	441a      	add	r2, r3
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003cea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d103      	bne.n	8003cfa <find_volume+0x3de>
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	e00a      	b.n	8003d10 <find_volume+0x3f4>
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4413      	add	r3, r2
 8003d04:	085a      	lsrs	r2, r3, #1
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8003d10:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	899b      	ldrh	r3, [r3, #12]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1e:	440b      	add	r3, r1
 8003d20:	3b01      	subs	r3, #1
 8003d22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d24:	8989      	ldrh	r1, [r1, #12]
 8003d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d201      	bcs.n	8003d32 <find_volume+0x416>
 8003d2e:	230d      	movs	r3, #13
 8003d30:	e06a      	b.n	8003e08 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295
 8003d38:	615a      	str	r2, [r3, #20]
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	2280      	movs	r2, #128	; 0x80
 8003d46:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003d48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d149      	bne.n	8003de4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d52:	3334      	adds	r3, #52	; 0x34
 8003d54:	3330      	adds	r3, #48	; 0x30
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe fb3e 	bl	80023d8 <ld_word>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d140      	bne.n	8003de4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d64:	3301      	adds	r3, #1
 8003d66:	4619      	mov	r1, r3
 8003d68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d6a:	f7fe fde5 	bl	8002938 <move_window>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d137      	bne.n	8003de4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	2200      	movs	r2, #0
 8003d78:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	3334      	adds	r3, #52	; 0x34
 8003d7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe fb28 	bl	80023d8 <ld_word>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d127      	bne.n	8003de4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d96:	3334      	adds	r3, #52	; 0x34
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe fb35 	bl	8002408 <ld_dword>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4a1b      	ldr	r2, [pc, #108]	; (8003e10 <find_volume+0x4f4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d11e      	bne.n	8003de4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	3334      	adds	r3, #52	; 0x34
 8003daa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fb2a 	bl	8002408 <ld_dword>
 8003db4:	4603      	mov	r3, r0
 8003db6:	4a17      	ldr	r2, [pc, #92]	; (8003e14 <find_volume+0x4f8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d113      	bne.n	8003de4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	3334      	adds	r3, #52	; 0x34
 8003dc0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fe fb1f 	bl	8002408 <ld_dword>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	3334      	adds	r3, #52	; 0x34
 8003dd4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe fb15 	bl	8002408 <ld_dword>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003dea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <find_volume+0x4fc>)
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	3301      	adds	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <find_volume+0x4fc>)
 8003df6:	801a      	strh	r2, [r3, #0]
 8003df8:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <find_volume+0x4fc>)
 8003dfa:	881a      	ldrh	r2, [r3, #0]
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8003e00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e02:	f7fe fd31 	bl	8002868 <clear_lock>
#endif
	return FR_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3758      	adds	r7, #88	; 0x58
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	41615252 	.word	0x41615252
 8003e14:	61417272 	.word	0x61417272
 8003e18:	20003174 	.word	0x20003174

08003e1c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8003e26:	2309      	movs	r3, #9
 8003e28:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01c      	beq.n	8003e6a <validate+0x4e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d018      	beq.n	8003e6a <validate+0x4e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d013      	beq.n	8003e6a <validate+0x4e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	889a      	ldrh	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	88db      	ldrh	r3, [r3, #6]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d10c      	bne.n	8003e6a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	785b      	ldrb	r3, [r3, #1]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fa20 	bl	800229c <disk_status>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <validate+0x4e>
			res = FR_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d102      	bne.n	8003e76 <validate+0x5a>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	e000      	b.n	8003e78 <validate+0x5c>
 8003e76:	2300      	movs	r3, #0
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	6013      	str	r3, [r2, #0]
	return res;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	4613      	mov	r3, r2
 8003e94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003e9a:	f107 0310 	add.w	r3, r7, #16
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fca2 	bl	80037e8 <get_ldnumber>
 8003ea4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	da01      	bge.n	8003eb0 <f_mount+0x28>
 8003eac:	230b      	movs	r3, #11
 8003eae:	e02b      	b.n	8003f08 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003eb0:	4a17      	ldr	r2, [pc, #92]	; (8003f10 <f_mount+0x88>)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8003ec0:	69b8      	ldr	r0, [r7, #24]
 8003ec2:	f7fe fcd1 	bl	8002868 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	490d      	ldr	r1, [pc, #52]	; (8003f10 <f_mount+0x88>)
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <f_mount+0x66>
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d001      	beq.n	8003ef2 <f_mount+0x6a>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e00a      	b.n	8003f08 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003ef2:	f107 010c 	add.w	r1, r7, #12
 8003ef6:	f107 0308 	add.w	r3, r7, #8
 8003efa:	2200      	movs	r2, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff fd0d 	bl	800391c <find_volume>
 8003f02:	4603      	mov	r3, r0
 8003f04:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20003170 	.word	0x20003170

08003f14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b098      	sub	sp, #96	; 0x60
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <f_open+0x18>
 8003f28:	2309      	movs	r3, #9
 8003f2a:	e1bb      	b.n	80042a4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f32:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8003f34:	79fa      	ldrb	r2, [r7, #7]
 8003f36:	f107 0110 	add.w	r1, r7, #16
 8003f3a:	f107 0308 	add.w	r3, r7, #8
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fcec 	bl	800391c <find_volume>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8003f4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f040 819f 	bne.w	8004292 <f_open+0x37e>
		dj.obj.fs = fs;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	f107 0314 	add.w	r3, r7, #20
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fbcb 	bl	80036fc <follow_path>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003f6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d11a      	bne.n	8003faa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003f74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003f78:	b25b      	sxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da03      	bge.n	8003f86 <f_open+0x72>
				res = FR_INVALID_NAME;
 8003f7e:	2306      	movs	r3, #6
 8003f80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003f84:	e011      	b.n	8003faa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf14      	ite	ne
 8003f90:	2301      	movne	r3, #1
 8003f92:	2300      	moveq	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	f107 0314 	add.w	r3, r7, #20
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe fb1a 	bl	80025d8 <chk_lock>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	f003 031c 	and.w	r3, r3, #28
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d07f      	beq.n	80040b4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8003fb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d017      	beq.n	8003fec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d10e      	bne.n	8003fe2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003fc4:	f7fe fb64 	bl	8002690 <enq_lock>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d006      	beq.n	8003fdc <f_open+0xc8>
 8003fce:	f107 0314 	add.w	r3, r7, #20
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff facc 	bl	8003570 <dir_register>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	e000      	b.n	8003fde <f_open+0xca>
 8003fdc:	2312      	movs	r3, #18
 8003fde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	f043 0308 	orr.w	r3, r3, #8
 8003fe8:	71fb      	strb	r3, [r7, #7]
 8003fea:	e010      	b.n	800400e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003fec:	7ebb      	ldrb	r3, [r7, #26]
 8003fee:	f003 0311 	and.w	r3, r3, #17
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <f_open+0xea>
					res = FR_DENIED;
 8003ff6:	2307      	movs	r3, #7
 8003ff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003ffc:	e007      	b.n	800400e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <f_open+0xfa>
 8004008:	2308      	movs	r3, #8
 800400a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800400e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004012:	2b00      	cmp	r3, #0
 8004014:	d168      	bne.n	80040e8 <f_open+0x1d4>
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d063      	beq.n	80040e8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8004020:	f7fe f89a 	bl	8002158 <get_fattime>
 8004024:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004028:	330e      	adds	r3, #14
 800402a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe fa29 	bl	8002484 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004034:	3316      	adds	r3, #22
 8004036:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe fa23 	bl	8002484 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800403e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004040:	330b      	adds	r3, #11
 8004042:	2220      	movs	r2, #32
 8004044:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800404a:	4611      	mov	r1, r2
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff f9fb 	bl	8003448 <ld_clust>
 8004052:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004058:	2200      	movs	r2, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff fa13 	bl	8003486 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004062:	331c      	adds	r3, #28
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe fa0c 	bl	8002484 <st_dword>
					fs->wflag = 1;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2201      	movs	r2, #1
 8004070:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004074:	2b00      	cmp	r3, #0
 8004076:	d037      	beq.n	80040e8 <f_open+0x1d4>
						dw = fs->winsect;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800407e:	f107 0314 	add.w	r3, r7, #20
 8004082:	2200      	movs	r2, #0
 8004084:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe ff03 	bl	8002e92 <remove_chain>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8004092:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004096:	2b00      	cmp	r3, #0
 8004098:	d126      	bne.n	80040e8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fc4a 	bl	8002938 <move_window>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040ae:	3a01      	subs	r2, #1
 80040b0:	611a      	str	r2, [r3, #16]
 80040b2:	e019      	b.n	80040e8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80040b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d115      	bne.n	80040e8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80040bc:	7ebb      	ldrb	r3, [r7, #26]
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <f_open+0x1ba>
					res = FR_NO_FILE;
 80040c6:	2304      	movs	r3, #4
 80040c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80040cc:	e00c      	b.n	80040e8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <f_open+0x1d4>
 80040d8:	7ebb      	ldrb	r3, [r7, #26]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <f_open+0x1d4>
						res = FR_DENIED;
 80040e2:	2307      	movs	r3, #7
 80040e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80040e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d128      	bne.n	8004142 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004100:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800410a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	bf14      	ite	ne
 800411a:	2301      	movne	r3, #1
 800411c:	2300      	moveq	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	f107 0314 	add.w	r3, r7, #20
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f7fe fad3 	bl	80026d4 <inc_lock>
 800412e:	4602      	mov	r2, r0
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <f_open+0x22e>
 800413c:	2302      	movs	r3, #2
 800413e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004142:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004146:	2b00      	cmp	r3, #0
 8004148:	f040 80a3 	bne.w	8004292 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004150:	4611      	mov	r1, r2
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff f978 	bl	8003448 <ld_clust>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800415e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004160:	331c      	adds	r3, #28
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe f950 	bl	8002408 <ld_dword>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	88da      	ldrh	r2, [r3, #6]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	79fa      	ldrb	r2, [r7, #7]
 8004186:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3330      	adds	r3, #48	; 0x30
 800419e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe f9ba 	bl	800251e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d06e      	beq.n	8004292 <f_open+0x37e>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d06a      	beq.n	8004292 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	895b      	ldrh	r3, [r3, #10]
 80041c8:	461a      	mov	r2, r3
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	899b      	ldrh	r3, [r3, #12]
 80041ce:	fb02 f303 	mul.w	r3, r2, r3
 80041d2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	657b      	str	r3, [r7, #84]	; 0x54
 80041e0:	e016      	b.n	8004210 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe fc63 	bl	8002ab2 <get_fat>
 80041ec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80041ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d802      	bhi.n	80041fa <f_open+0x2e6>
 80041f4:	2302      	movs	r3, #2
 80041f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80041fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d102      	bne.n	8004208 <f_open+0x2f4>
 8004202:	2301      	movs	r3, #1
 8004204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004208:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800420a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	657b      	str	r3, [r7, #84]	; 0x54
 8004210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004214:	2b00      	cmp	r3, #0
 8004216:	d103      	bne.n	8004220 <f_open+0x30c>
 8004218:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800421a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421c:	429a      	cmp	r2, r3
 800421e:	d8e0      	bhi.n	80041e2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004224:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004226:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800422a:	2b00      	cmp	r3, #0
 800422c:	d131      	bne.n	8004292 <f_open+0x37e>
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	899b      	ldrh	r3, [r3, #12]
 8004232:	461a      	mov	r2, r3
 8004234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004236:	fbb3 f1f2 	udiv	r1, r3, r2
 800423a:	fb01 f202 	mul.w	r2, r1, r2
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d026      	beq.n	8004292 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe fc13 	bl	8002a74 <clust2sect>
 800424e:	6478      	str	r0, [r7, #68]	; 0x44
 8004250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <f_open+0x34a>
						res = FR_INT_ERR;
 8004256:	2302      	movs	r3, #2
 8004258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800425c:	e019      	b.n	8004292 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	899b      	ldrh	r3, [r3, #12]
 8004262:	461a      	mov	r2, r3
 8004264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004266:	fbb3 f2f2 	udiv	r2, r3, r2
 800426a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800426c:	441a      	add	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	7858      	ldrb	r0, [r3, #1]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a1a      	ldr	r2, [r3, #32]
 8004280:	2301      	movs	r3, #1
 8004282:	f7fe f84b 	bl	800231c <disk_read>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <f_open+0x37e>
 800428c:	2301      	movs	r3, #1
 800428e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004292:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <f_open+0x38c>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80042a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3760      	adds	r7, #96	; 0x60
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08e      	sub	sp, #56	; 0x38
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f107 0214 	add.w	r2, r7, #20
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fda5 	bl	8003e1c <validate>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80042d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d107      	bne.n	80042f0 <f_read+0x44>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	7d5b      	ldrb	r3, [r3, #21]
 80042e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80042e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <f_read+0x4a>
 80042f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80042f4:	e135      	b.n	8004562 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	7d1b      	ldrb	r3, [r3, #20]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <f_read+0x5a>
 8004302:	2307      	movs	r3, #7
 8004304:	e12d      	b.n	8004562 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	429a      	cmp	r2, r3
 8004318:	f240 811e 	bls.w	8004558 <f_read+0x2ac>
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8004320:	e11a      	b.n	8004558 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	8992      	ldrh	r2, [r2, #12]
 800432a:	fbb3 f1f2 	udiv	r1, r3, r2
 800432e:	fb01 f202 	mul.w	r2, r1, r2
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	f040 80d5 	bne.w	80044e4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	8992      	ldrh	r2, [r2, #12]
 8004342:	fbb3 f3f2 	udiv	r3, r3, r2
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	8952      	ldrh	r2, [r2, #10]
 800434a:	3a01      	subs	r2, #1
 800434c:	4013      	ands	r3, r2
 800434e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d12f      	bne.n	80043b6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	633b      	str	r3, [r7, #48]	; 0x30
 8004364:	e013      	b.n	800438e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	4619      	mov	r1, r3
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7fe fe89 	bl	800308c <clmt_clust>
 800437a:	6338      	str	r0, [r7, #48]	; 0x30
 800437c:	e007      	b.n	800438e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f7fe fb93 	bl	8002ab2 <get_fat>
 800438c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	2b01      	cmp	r3, #1
 8004392:	d804      	bhi.n	800439e <f_read+0xf2>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2202      	movs	r2, #2
 8004398:	755a      	strb	r2, [r3, #21]
 800439a:	2302      	movs	r3, #2
 800439c:	e0e1      	b.n	8004562 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d104      	bne.n	80043b0 <f_read+0x104>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	755a      	strb	r2, [r3, #21]
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0d8      	b.n	8004562 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	4619      	mov	r1, r3
 80043be:	4610      	mov	r0, r2
 80043c0:	f7fe fb58 	bl	8002a74 <clust2sect>
 80043c4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <f_read+0x12a>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2202      	movs	r2, #2
 80043d0:	755a      	strb	r2, [r3, #21]
 80043d2:	2302      	movs	r3, #2
 80043d4:	e0c5      	b.n	8004562 <f_read+0x2b6>
			sect += csect;
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	4413      	add	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	899b      	ldrh	r3, [r3, #12]
 80043e2:	461a      	mov	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d041      	beq.n	8004476 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	4413      	add	r3, r2
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	8952      	ldrh	r2, [r2, #10]
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d905      	bls.n	800440c <f_read+0x160>
					cc = fs->csize - csect;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	895b      	ldrh	r3, [r3, #10]
 8004404:	461a      	mov	r2, r3
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	7858      	ldrb	r0, [r3, #1]
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004416:	f7fd ff81 	bl	800231c <disk_read>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <f_read+0x17e>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	755a      	strb	r2, [r3, #21]
 8004426:	2301      	movs	r3, #1
 8004428:	e09b      	b.n	8004562 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	7d1b      	ldrb	r3, [r3, #20]
 800442e:	b25b      	sxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	da18      	bge.n	8004466 <f_read+0x1ba>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1a      	ldr	r2, [r3, #32]
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800443e:	429a      	cmp	r2, r3
 8004440:	d911      	bls.n	8004466 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1a      	ldr	r2, [r3, #32]
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	8992      	ldrh	r2, [r2, #12]
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004454:	18d0      	adds	r0, r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	899b      	ldrh	r3, [r3, #12]
 8004460:	461a      	mov	r2, r3
 8004462:	f7fe f83b 	bl	80024dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	899b      	ldrh	r3, [r3, #12]
 800446a:	461a      	mov	r2, r3
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	fb02 f303 	mul.w	r3, r2, r3
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8004474:	e05c      	b.n	8004530 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	429a      	cmp	r2, r3
 800447e:	d02e      	beq.n	80044de <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	7d1b      	ldrb	r3, [r3, #20]
 8004484:	b25b      	sxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	da18      	bge.n	80044bc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	7858      	ldrb	r0, [r3, #1]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1a      	ldr	r2, [r3, #32]
 8004498:	2301      	movs	r3, #1
 800449a:	f7fd ff5f 	bl	800235c <disk_write>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d004      	beq.n	80044ae <f_read+0x202>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	755a      	strb	r2, [r3, #21]
 80044aa:	2301      	movs	r3, #1
 80044ac:	e059      	b.n	8004562 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	7d1b      	ldrb	r3, [r3, #20]
 80044b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	7858      	ldrb	r0, [r3, #1]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80044c6:	2301      	movs	r3, #1
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	f7fd ff27 	bl	800231c <disk_read>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <f_read+0x232>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	755a      	strb	r2, [r3, #21]
 80044da:	2301      	movs	r3, #1
 80044dc:	e041      	b.n	8004562 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	899b      	ldrh	r3, [r3, #12]
 80044e8:	4618      	mov	r0, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	8992      	ldrh	r2, [r2, #12]
 80044f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80044f6:	fb01 f202 	mul.w	r2, r1, r2
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	1ac3      	subs	r3, r0, r3
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	429a      	cmp	r2, r3
 8004506:	d901      	bls.n	800450c <f_read+0x260>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	8992      	ldrh	r2, [r2, #12]
 800451a:	fbb3 f0f2 	udiv	r0, r3, r2
 800451e:	fb00 f202 	mul.w	r2, r0, r2
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	440b      	add	r3, r1
 8004526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004528:	4619      	mov	r1, r3
 800452a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800452c:	f7fd ffd6 	bl	80024dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004534:	4413      	add	r3, r2
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	699a      	ldr	r2, [r3, #24]
 800453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453e:	441a      	add	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	619a      	str	r2, [r3, #24]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	441a      	add	r2, r3
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	f47f aee1 	bne.w	8004322 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3738      	adds	r7, #56	; 0x38
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b08c      	sub	sp, #48	; 0x30
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f107 0210 	add.w	r2, r7, #16
 8004588:	4611      	mov	r1, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fc46 	bl	8003e1c <validate>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800459a:	2b00      	cmp	r3, #0
 800459c:	d107      	bne.n	80045ae <f_write+0x44>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	7d5b      	ldrb	r3, [r3, #21]
 80045a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80045a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <f_write+0x4a>
 80045ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045b2:	e16a      	b.n	800488a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	7d1b      	ldrb	r3, [r3, #20]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <f_write+0x5a>
 80045c0:	2307      	movs	r3, #7
 80045c2:	e162      	b.n	800488a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	699a      	ldr	r2, [r3, #24]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	441a      	add	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	f080 814c 	bcs.w	800486e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	43db      	mvns	r3, r3
 80045dc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80045de:	e146      	b.n	800486e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	8992      	ldrh	r2, [r2, #12]
 80045e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80045ec:	fb01 f202 	mul.w	r2, r1, r2
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f040 80f1 	bne.w	80047da <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	8992      	ldrh	r2, [r2, #12]
 8004600:	fbb3 f3f2 	udiv	r3, r3, r2
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	8952      	ldrh	r2, [r2, #10]
 8004608:	3a01      	subs	r2, #1
 800460a:	4013      	ands	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d143      	bne.n	800469c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10c      	bne.n	8004636 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11a      	bne.n	800465e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe fc95 	bl	8002f5c <create_chain>
 8004632:	62b8      	str	r0, [r7, #40]	; 0x28
 8004634:	e013      	b.n	800465e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	4619      	mov	r1, r3
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7fe fd21 	bl	800308c <clmt_clust>
 800464a:	62b8      	str	r0, [r7, #40]	; 0x28
 800464c:	e007      	b.n	800465e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	4619      	mov	r1, r3
 8004656:	4610      	mov	r0, r2
 8004658:	f7fe fc80 	bl	8002f5c <create_chain>
 800465c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 8109 	beq.w	8004878 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	2b01      	cmp	r3, #1
 800466a:	d104      	bne.n	8004676 <f_write+0x10c>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2202      	movs	r2, #2
 8004670:	755a      	strb	r2, [r3, #21]
 8004672:	2302      	movs	r3, #2
 8004674:	e109      	b.n	800488a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467c:	d104      	bne.n	8004688 <f_write+0x11e>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	755a      	strb	r2, [r3, #21]
 8004684:	2301      	movs	r3, #1
 8004686:	e100      	b.n	800488a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800468c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <f_write+0x132>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800469a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	7d1b      	ldrb	r3, [r3, #20]
 80046a0:	b25b      	sxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	da18      	bge.n	80046d8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	7858      	ldrb	r0, [r3, #1]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1a      	ldr	r2, [r3, #32]
 80046b4:	2301      	movs	r3, #1
 80046b6:	f7fd fe51 	bl	800235c <disk_write>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d004      	beq.n	80046ca <f_write+0x160>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	755a      	strb	r2, [r3, #21]
 80046c6:	2301      	movs	r3, #1
 80046c8:	e0df      	b.n	800488a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	7d1b      	ldrb	r3, [r3, #20]
 80046ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f7fe f9c7 	bl	8002a74 <clust2sect>
 80046e6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d104      	bne.n	80046f8 <f_write+0x18e>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2202      	movs	r2, #2
 80046f2:	755a      	strb	r2, [r3, #21]
 80046f4:	2302      	movs	r3, #2
 80046f6:	e0c8      	b.n	800488a <f_write+0x320>
			sect += csect;
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	4413      	add	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	899b      	ldrh	r3, [r3, #12]
 8004704:	461a      	mov	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	fbb3 f3f2 	udiv	r3, r3, r2
 800470c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d043      	beq.n	800479c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	4413      	add	r3, r2
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	8952      	ldrh	r2, [r2, #10]
 800471e:	4293      	cmp	r3, r2
 8004720:	d905      	bls.n	800472e <f_write+0x1c4>
					cc = fs->csize - csect;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	895b      	ldrh	r3, [r3, #10]
 8004726:	461a      	mov	r2, r3
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	7858      	ldrb	r0, [r3, #1]
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	69f9      	ldr	r1, [r7, #28]
 8004738:	f7fd fe10 	bl	800235c <disk_write>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <f_write+0x1e2>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	755a      	strb	r2, [r3, #21]
 8004748:	2301      	movs	r3, #1
 800474a:	e09e      	b.n	800488a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1a      	ldr	r2, [r3, #32]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	6a3a      	ldr	r2, [r7, #32]
 8004756:	429a      	cmp	r2, r3
 8004758:	d918      	bls.n	800478c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a1a      	ldr	r2, [r3, #32]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	8992      	ldrh	r2, [r2, #12]
 800476c:	fb02 f303 	mul.w	r3, r2, r3
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	18d1      	adds	r1, r2, r3
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	899b      	ldrh	r3, [r3, #12]
 8004778:	461a      	mov	r2, r3
 800477a:	f7fd feaf 	bl	80024dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	7d1b      	ldrb	r3, [r3, #20]
 8004782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004786:	b2da      	uxtb	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	899b      	ldrh	r3, [r3, #12]
 8004790:	461a      	mov	r2, r3
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	fb02 f303 	mul.w	r3, r2, r3
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800479a:	e04b      	b.n	8004834 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d016      	beq.n	80047d4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d210      	bcs.n	80047d4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	7858      	ldrb	r0, [r3, #1]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80047bc:	2301      	movs	r3, #1
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	f7fd fdac 	bl	800231c <disk_read>
 80047c4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d004      	beq.n	80047d4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	755a      	strb	r2, [r3, #21]
 80047d0:	2301      	movs	r3, #1
 80047d2:	e05a      	b.n	800488a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	899b      	ldrh	r3, [r3, #12]
 80047de:	4618      	mov	r0, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	8992      	ldrh	r2, [r2, #12]
 80047e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80047ec:	fb01 f202 	mul.w	r2, r1, r2
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	1ac3      	subs	r3, r0, r3
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80047f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d901      	bls.n	8004802 <f_write+0x298>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	8992      	ldrh	r2, [r2, #12]
 8004810:	fbb3 f0f2 	udiv	r0, r3, r2
 8004814:	fb00 f202 	mul.w	r2, r0, r2
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	440b      	add	r3, r1
 800481c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481e:	69f9      	ldr	r1, [r7, #28]
 8004820:	4618      	mov	r0, r3
 8004822:	f7fd fe5b 	bl	80024dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	7d1b      	ldrb	r3, [r3, #20]
 800482a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800482e:	b2da      	uxtb	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	4413      	add	r3, r2
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	699a      	ldr	r2, [r3, #24]
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	441a      	add	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	619a      	str	r2, [r3, #24]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	429a      	cmp	r2, r3
 8004852:	bf38      	it	cc
 8004854:	461a      	movcc	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	441a      	add	r2, r3
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f47f aeb5 	bne.w	80045e0 <f_write+0x76>
 8004876:	e000      	b.n	800487a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004878:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	7d1b      	ldrb	r3, [r3, #20]
 800487e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004882:	b2da      	uxtb	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3730      	adds	r7, #48	; 0x30
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b086      	sub	sp, #24
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f107 0208 	add.w	r2, r7, #8
 80048a0:	4611      	mov	r1, r2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff faba 	bl	8003e1c <validate>
 80048a8:	4603      	mov	r3, r0
 80048aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d168      	bne.n	8004984 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	7d1b      	ldrb	r3, [r3, #20]
 80048b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d062      	beq.n	8004984 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	7d1b      	ldrb	r3, [r3, #20]
 80048c2:	b25b      	sxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	da15      	bge.n	80048f4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	7858      	ldrb	r0, [r3, #1]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	2301      	movs	r3, #1
 80048d8:	f7fd fd40 	bl	800235c <disk_write>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <f_sync+0x54>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e04f      	b.n	8004986 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	7d1b      	ldrb	r3, [r3, #20]
 80048ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80048f4:	f7fd fc30 	bl	8002158 <get_fattime>
 80048f8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f7fe f818 	bl	8002938 <move_window>
 8004908:	4603      	mov	r3, r0
 800490a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800490c:	7dfb      	ldrb	r3, [r7, #23]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d138      	bne.n	8004984 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	330b      	adds	r3, #11
 800491c:	781a      	ldrb	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	330b      	adds	r3, #11
 8004922:	f042 0220 	orr.w	r2, r2, #32
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	461a      	mov	r2, r3
 8004934:	68f9      	ldr	r1, [r7, #12]
 8004936:	f7fe fda6 	bl	8003486 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f103 021c 	add.w	r2, r3, #28
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f7fd fd9c 	bl	8002484 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3316      	adds	r3, #22
 8004950:	6939      	ldr	r1, [r7, #16]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fd fd96 	bl	8002484 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3312      	adds	r3, #18
 800495c:	2100      	movs	r1, #0
 800495e:	4618      	mov	r0, r3
 8004960:	f7fd fd75 	bl	800244e <st_word>
					fs->wflag = 1;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2201      	movs	r2, #1
 8004968:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	4618      	mov	r0, r3
 800496e:	f7fe f811 	bl	8002994 <sync_fs>
 8004972:	4603      	mov	r3, r0
 8004974:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	7d1b      	ldrb	r3, [r3, #20]
 800497a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497e:	b2da      	uxtb	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8004984:	7dfb      	ldrb	r3, [r7, #23]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff ff7b 	bl	8004892 <f_sync>
 800499c:	4603      	mov	r3, r0
 800499e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d118      	bne.n	80049d8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f107 0208 	add.w	r2, r7, #8
 80049ac:	4611      	mov	r1, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff fa34 	bl	8003e1c <validate>
 80049b4:	4603      	mov	r3, r0
 80049b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10c      	bne.n	80049d8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fd ff14 	bl	80027f0 <dec_lock>
 80049c8:	4603      	mov	r3, r0
 80049ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d102      	bne.n	80049d8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b09d      	sub	sp, #116	; 0x74
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	607a      	str	r2, [r7, #4]
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	460b      	mov	r3, r1
 80049f2:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80049f4:	2301      	movs	r3, #1
 80049f6:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80049f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049fc:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80049fe:	f107 030c 	add.w	r3, r7, #12
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fe fef0 	bl	80037e8 <get_ldnumber>
 8004a08:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	da02      	bge.n	8004a16 <f_mkfs+0x32>
 8004a10:	230b      	movs	r3, #11
 8004a12:	f000 bc31 	b.w	8005278 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8004a16:	4aa5      	ldr	r2, [pc, #660]	; (8004cac <f_mkfs+0x2c8>)
 8004a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <f_mkfs+0x4a>
 8004a22:	4aa2      	ldr	r2, [pc, #648]	; (8004cac <f_mkfs+0x2c8>)
 8004a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8004a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a30:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8004a34:	2300      	movs	r3, #0
 8004a36:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8004a3a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fd fc46 	bl	80022d0 <disk_initialize>
 8004a44:	4603      	mov	r3, r0
 8004a46:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8004a4a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <f_mkfs+0x78>
 8004a56:	2303      	movs	r3, #3
 8004a58:	f000 bc0e 	b.w	8005278 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8004a5c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <f_mkfs+0x8a>
 8004a68:	230a      	movs	r3, #10
 8004a6a:	f000 bc05 	b.w	8005278 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8004a6e:	f107 0214 	add.w	r2, r7, #20
 8004a72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004a76:	2103      	movs	r1, #3
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fd fc8f 	bl	800239c <disk_ioctl>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10c      	bne.n	8004a9e <f_mkfs+0xba>
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <f_mkfs+0xba>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a90:	d805      	bhi.n	8004a9e <f_mkfs+0xba>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	1e5a      	subs	r2, r3, #1
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <f_mkfs+0xbe>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 8004aa2:	f107 021a 	add.w	r2, r7, #26
 8004aa6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004aaa:	2102      	movs	r1, #2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fd fc75 	bl	800239c <disk_ioctl>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <f_mkfs+0xd8>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e3dd      	b.n	8005278 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 8004abc:	8b7b      	ldrh	r3, [r7, #26]
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac2:	d80a      	bhi.n	8004ada <f_mkfs+0xf6>
 8004ac4:	8b7b      	ldrh	r3, [r7, #26]
 8004ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aca:	d306      	bcc.n	8004ada <f_mkfs+0xf6>
 8004acc:	8b7b      	ldrh	r3, [r7, #26]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	8b7b      	ldrh	r3, [r7, #26]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <f_mkfs+0xfa>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e3cc      	b.n	8005278 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d004      	beq.n	8004aee <f_mkfs+0x10a>
 8004ae4:	8b7b      	ldrh	r3, [r7, #26]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d309      	bcc.n	8004b02 <f_mkfs+0x11e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004af4:	d805      	bhi.n	8004b02 <f_mkfs+0x11e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	1e5a      	subs	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4013      	ands	r3, r2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <f_mkfs+0x122>
 8004b02:	2313      	movs	r3, #19
 8004b04:	e3b8      	b.n	8005278 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 8004b06:	8b7b      	ldrh	r3, [r7, #26]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b10:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8004b16:	8b7b      	ldrh	r3, [r7, #26]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b22:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8004b24:	8b7b      	ldrh	r3, [r7, #26]
 8004b26:	461a      	mov	r2, r3
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 8004b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <f_mkfs+0x156>
 8004b36:	230e      	movs	r3, #14
 8004b38:	e39e      	b.n	8005278 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8004b3a:	f107 0210 	add.w	r2, r7, #16
 8004b3e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004b42:	2101      	movs	r1, #1
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fd fc29 	bl	800239c <disk_ioctl>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <f_mkfs+0x170>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e391      	b.n	8005278 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8004b54:	7afb      	ldrb	r3, [r7, #11]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <f_mkfs+0x17e>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e000      	b.n	8004b64 <f_mkfs+0x180>
 8004b62:	233f      	movs	r3, #63	; 0x3f
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d901      	bls.n	8004b72 <f_mkfs+0x18e>
 8004b6e:	230e      	movs	r3, #14
 8004b70:	e382      	b.n	8005278 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b7e:	d801      	bhi.n	8004b84 <f_mkfs+0x1a0>
 8004b80:	230e      	movs	r3, #14
 8004b82:	e379      	b.n	8005278 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b80      	cmp	r3, #128	; 0x80
 8004b88:	d901      	bls.n	8004b8e <f_mkfs+0x1aa>
 8004b8a:	2313      	movs	r3, #19
 8004b8c:	e374      	b.n	8005278 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8004b8e:	7afb      	ldrb	r3, [r7, #11]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00d      	beq.n	8004bb4 <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8004b98:	7afb      	ldrb	r3, [r7, #11]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d004      	beq.n	8004bac <f_mkfs+0x1c8>
 8004ba2:	7afb      	ldrb	r3, [r7, #11]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d103      	bne.n	8004bb4 <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 8004bac:	2303      	movs	r3, #3
 8004bae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004bb2:	e009      	b.n	8004bc8 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8004bb4:	7afb      	ldrb	r3, [r7, #11]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <f_mkfs+0x1de>
 8004bbe:	2313      	movs	r3, #19
 8004bc0:	e35a      	b.n	8005278 <f_mkfs+0x894>
		fmt = FS_FAT16;
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8004bcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d13c      	bne.n	8004c4e <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 8004bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d11b      	bne.n	8004c12 <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	0c5b      	lsrs	r3, r3, #17
 8004bde:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004be0:	2300      	movs	r3, #0
 8004be2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004be4:	2301      	movs	r3, #1
 8004be6:	653b      	str	r3, [r7, #80]	; 0x50
 8004be8:	e005      	b.n	8004bf6 <f_mkfs+0x212>
 8004bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bec:	3301      	adds	r3, #1
 8004bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	653b      	str	r3, [r7, #80]	; 0x50
 8004bf6:	4a2e      	ldr	r2, [pc, #184]	; (8004cb0 <f_mkfs+0x2cc>)
 8004bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <f_mkfs+0x22e>
 8004c02:	4a2b      	ldr	r2, [pc, #172]	; (8004cb0 <f_mkfs+0x2cc>)
 8004c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d2eb      	bcs.n	8004bea <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	3302      	adds	r3, #2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	8b7a      	ldrh	r2, [r7, #26]
 8004c24:	4413      	add	r3, r2
 8004c26:	3b01      	subs	r3, #1
 8004c28:	8b7a      	ldrh	r2, [r7, #26]
 8004c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c2e:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8004c30:	2320      	movs	r3, #32
 8004c32:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8004c34:	2300      	movs	r3, #0
 8004c36:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d903      	bls.n	8004c4a <f_mkfs+0x266>
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	4a1b      	ldr	r2, [pc, #108]	; (8004cb4 <f_mkfs+0x2d0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d954      	bls.n	8004cf4 <f_mkfs+0x310>
 8004c4a:	230e      	movs	r3, #14
 8004c4c:	e314      	b.n	8005278 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8004c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d11b      	bne.n	8004c8c <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	0b1b      	lsrs	r3, r3, #12
 8004c58:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c5e:	2301      	movs	r3, #1
 8004c60:	653b      	str	r3, [r7, #80]	; 0x50
 8004c62:	e005      	b.n	8004c70 <f_mkfs+0x28c>
 8004c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c66:	3301      	adds	r3, #1
 8004c68:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c70:	4a11      	ldr	r2, [pc, #68]	; (8004cb8 <f_mkfs+0x2d4>)
 8004c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <f_mkfs+0x2a8>
 8004c7c:	4a0e      	ldr	r2, [pc, #56]	; (8004cb8 <f_mkfs+0x2d4>)
 8004c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c84:	461a      	mov	r2, r3
 8004c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d2eb      	bcs.n	8004c64 <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d90d      	bls.n	8004cbc <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca8:	e013      	b.n	8004cd2 <f_mkfs+0x2ee>
 8004caa:	bf00      	nop
 8004cac:	20003170 	.word	0x20003170
 8004cb0:	08005490 	.word	0x08005490
 8004cb4:	0ffffff5 	.word	0x0ffffff5
 8004cb8:	080054a0 	.word	0x080054a0
				} else {
					fmt = FS_FAT12;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8004cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4413      	add	r3, r2
 8004cca:	3301      	adds	r3, #1
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	3303      	adds	r3, #3
 8004cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8004cd2:	8b7b      	ldrh	r3, [r7, #26]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd8:	4413      	add	r3, r2
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	8b7a      	ldrh	r2, [r7, #26]
 8004cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ce2:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8004ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cea:	015b      	lsls	r3, r3, #5
 8004cec:	8b7a      	ldrh	r2, [r7, #26]
 8004cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8004cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf8:	4413      	add	r3, r2
 8004cfa:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8004cfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d00:	fb03 f202 	mul.w	r2, r3, r2
 8004d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d06:	4413      	add	r3, r2
 8004d08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d0a:	4413      	add	r3, r2
 8004d0c:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	4413      	add	r3, r2
 8004d14:	1e5a      	subs	r2, r3, #1
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	425b      	negs	r3, r3
 8004d1a:	401a      	ands	r2, r3
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8004d22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d108      	bne.n	8004d3c <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 8004d2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d2e:	4413      	add	r3, r2
 8004d30:	657b      	str	r3, [r7, #84]	; 0x54
 8004d32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d36:	4413      	add	r3, r2
 8004d38:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d3a:	e006      	b.n	8004d4a <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8004d3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d46:	4413      	add	r3, r2
 8004d48:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8004d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d4c:	011a      	lsls	r2, r3, #4
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	441a      	add	r2, r3
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	1ad2      	subs	r2, r2, r3
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d901      	bls.n	8004d60 <f_mkfs+0x37c>
 8004d5c:	230e      	movs	r3, #14
 8004d5e:	e28b      	b.n	8005278 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d64:	1ad2      	subs	r2, r2, r3
 8004d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d6a:	fb01 f303 	mul.w	r3, r1, r3
 8004d6e:	1ad2      	subs	r2, r2, r3
 8004d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d72:	1ad2      	subs	r2, r2, r3
 8004d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 8004d7c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d10f      	bne.n	8004da4 <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d80a      	bhi.n	8004da4 <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <f_mkfs+0x3bc>
 8004d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d144      	bne.n	8004e2a <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 8004da0:	230e      	movs	r3, #14
 8004da2:	e269      	b.n	8005278 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 8004da4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d133      	bne.n	8004e14 <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d91e      	bls.n	8004df4 <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d107      	bne.n	8004dcc <f_mkfs+0x3e8>
 8004dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d803      	bhi.n	8004dcc <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8004dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	e033      	b.n	8004e34 <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 8004dcc:	7afb      	ldrb	r3, [r7, #11]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004ddc:	e02a      	b.n	8004e34 <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d105      	bne.n	8004df0 <f_mkfs+0x40c>
 8004de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b80      	cmp	r3, #128	; 0x80
 8004dee:	d91e      	bls.n	8004e2e <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 8004df0:	230e      	movs	r3, #14
 8004df2:	e241      	b.n	8005278 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d80a      	bhi.n	8004e14 <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d105      	bne.n	8004e10 <f_mkfs+0x42c>
 8004e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	607b      	str	r3, [r7, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b80      	cmp	r3, #128	; 0x80
 8004e0e:	d910      	bls.n	8004e32 <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 8004e10:	230e      	movs	r3, #14
 8004e12:	e231      	b.n	8005278 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8004e14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d10c      	bne.n	8004e36 <f_mkfs+0x452>
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d907      	bls.n	8004e36 <f_mkfs+0x452>
 8004e26:	230e      	movs	r3, #14
 8004e28:	e226      	b.n	8005278 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8004e2a:	bf00      	nop
 8004e2c:	e6cc      	b.n	8004bc8 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8004e2e:	bf00      	nop
 8004e30:	e6ca      	b.n	8004bc8 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8004e32:	bf00      	nop
			pau = au;
 8004e34:	e6c8      	b.n	8004bc8 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 8004e36:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8004e38:	8b7b      	ldrh	r3, [r7, #26]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e40:	f7fd fb6d 	bl	800251e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8004e44:	220b      	movs	r2, #11
 8004e46:	49b3      	ldr	r1, [pc, #716]	; (8005114 <f_mkfs+0x730>)
 8004e48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e4a:	f7fd fb47 	bl	80024dc <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e50:	330b      	adds	r3, #11
 8004e52:	8b7a      	ldrh	r2, [r7, #26]
 8004e54:	4611      	mov	r1, r2
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fd faf9 	bl	800244e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8004e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5e:	330d      	adds	r3, #13
 8004e60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8004e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e68:	330e      	adds	r3, #14
 8004e6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e6c:	b292      	uxth	r2, r2
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fd faec 	bl	800244e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8004e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e78:	3310      	adds	r3, #16
 8004e7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8004e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e82:	f103 0211 	add.w	r2, r3, #17
 8004e86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d002      	beq.n	8004e94 <f_mkfs+0x4b0>
 8004e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	e000      	b.n	8004e96 <f_mkfs+0x4b2>
 8004e94:	2300      	movs	r3, #0
 8004e96:	4619      	mov	r1, r3
 8004e98:	4610      	mov	r0, r2
 8004e9a:	f7fd fad8 	bl	800244e <st_word>
		if (sz_vol < 0x10000) {
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea4:	d208      	bcs.n	8004eb8 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8004ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea8:	3313      	adds	r3, #19
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	b292      	uxth	r2, r2
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fd facc 	bl	800244e <st_word>
 8004eb6:	e006      	b.n	8004ec6 <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8004eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eba:	3320      	adds	r3, #32
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fd fadf 	bl	8002484 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8004ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec8:	3315      	adds	r3, #21
 8004eca:	22f8      	movs	r2, #248	; 0xf8
 8004ecc:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8004ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed0:	3318      	adds	r3, #24
 8004ed2:	213f      	movs	r1, #63	; 0x3f
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fd faba 	bl	800244e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8004eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004edc:	331a      	adds	r3, #26
 8004ede:	21ff      	movs	r1, #255	; 0xff
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fd fab4 	bl	800244e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8004ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee8:	331c      	adds	r3, #28
 8004eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fd fac9 	bl	8002484 <st_dword>
		if (fmt == FS_FAT32) {
 8004ef2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d131      	bne.n	8004f5e <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8004efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efc:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8004f00:	f7fd f92a 	bl	8002158 <get_fattime>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4619      	mov	r1, r3
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f7fd fabb 	bl	8002484 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	3324      	adds	r3, #36	; 0x24
 8004f12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fd fab5 	bl	8002484 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8004f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1c:	332c      	adds	r3, #44	; 0x2c
 8004f1e:	2102      	movs	r1, #2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fd faaf 	bl	8002484 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8004f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f28:	3330      	adds	r3, #48	; 0x30
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fd fa8e 	bl	800244e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8004f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f34:	3332      	adds	r3, #50	; 0x32
 8004f36:	2106      	movs	r1, #6
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fd fa88 	bl	800244e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8004f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f40:	3340      	adds	r3, #64	; 0x40
 8004f42:	2280      	movs	r2, #128	; 0x80
 8004f44:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8004f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f48:	3342      	adds	r3, #66	; 0x42
 8004f4a:	2229      	movs	r2, #41	; 0x29
 8004f4c:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8004f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f50:	3347      	adds	r3, #71	; 0x47
 8004f52:	2213      	movs	r2, #19
 8004f54:	4970      	ldr	r1, [pc, #448]	; (8005118 <f_mkfs+0x734>)
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fd fac0 	bl	80024dc <mem_cpy>
 8004f5c:	e020      	b.n	8004fa0 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8004f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f60:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8004f64:	f7fd f8f8 	bl	8002158 <get_fattime>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f7fd fa89 	bl	8002484 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8004f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f74:	3316      	adds	r3, #22
 8004f76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f78:	b292      	uxth	r2, r2
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fd fa66 	bl	800244e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8004f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f84:	3324      	adds	r3, #36	; 0x24
 8004f86:	2280      	movs	r2, #128	; 0x80
 8004f88:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8c:	3326      	adds	r3, #38	; 0x26
 8004f8e:	2229      	movs	r2, #41	; 0x29
 8004f90:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	332b      	adds	r3, #43	; 0x2b
 8004f96:	2213      	movs	r2, #19
 8004f98:	4960      	ldr	r1, [pc, #384]	; (800511c <f_mkfs+0x738>)
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fd fa9e 	bl	80024dc <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8004fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004fa6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fd fa4f 	bl	800244e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8004fb0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fba:	f7fd f9cf 	bl	800235c <disk_write>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <f_mkfs+0x5e4>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e157      	b.n	8005278 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8004fc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d140      	bne.n	8005052 <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	1d9a      	adds	r2, r3, #6
 8004fd4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8004fd8:	2301      	movs	r3, #1
 8004fda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fdc:	f7fd f9be 	bl	800235c <disk_write>
			mem_set(buf, 0, ss);
 8004fe0:	8b7b      	ldrh	r3, [r7, #26]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004fe8:	f7fd fa99 	bl	800251e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8004fec:	494c      	ldr	r1, [pc, #304]	; (8005120 <f_mkfs+0x73c>)
 8004fee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ff0:	f7fd fa48 	bl	8002484 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8004ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004ffa:	494a      	ldr	r1, [pc, #296]	; (8005124 <f_mkfs+0x740>)
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fd fa41 	bl	8002484 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8005002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005004:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	3b01      	subs	r3, #1
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f7fd fa38 	bl	8002484 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8005014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005016:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800501a:	2102      	movs	r1, #2
 800501c:	4618      	mov	r0, r3
 800501e:	f7fd fa31 	bl	8002484 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8005022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005024:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005028:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800502c:	4618      	mov	r0, r3
 800502e:	f7fd fa0e 	bl	800244e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	1dda      	adds	r2, r3, #7
 8005036:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800503a:	2301      	movs	r3, #1
 800503c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800503e:	f7fd f98d 	bl	800235c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800504a:	2301      	movs	r3, #1
 800504c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800504e:	f7fd f985 	bl	800235c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8005052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005054:	2100      	movs	r1, #0
 8005056:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005058:	f7fd fa61 	bl	800251e <mem_set>
		sect = b_fat;		/* FAT start sector */
 800505c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800505e:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8005060:	2300      	movs	r3, #0
 8005062:	64bb      	str	r3, [r7, #72]	; 0x48
 8005064:	e04b      	b.n	80050fe <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 8005066:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800506a:	2b03      	cmp	r3, #3
 800506c:	d113      	bne.n	8005096 <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800506e:	f06f 0107 	mvn.w	r1, #7
 8005072:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005074:	f7fd fa06 	bl	8002484 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8005078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507a:	3304      	adds	r3, #4
 800507c:	f04f 31ff 	mov.w	r1, #4294967295
 8005080:	4618      	mov	r0, r3
 8005082:	f7fd f9ff 	bl	8002484 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8005086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005088:	3308      	adds	r3, #8
 800508a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800508e:	4618      	mov	r0, r3
 8005090:	f7fd f9f8 	bl	8002484 <st_dword>
 8005094:	e00b      	b.n	80050ae <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8005096:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <f_mkfs+0x6be>
 800509e:	4b22      	ldr	r3, [pc, #136]	; (8005128 <f_mkfs+0x744>)
 80050a0:	e001      	b.n	80050a6 <f_mkfs+0x6c2>
 80050a2:	f06f 0307 	mvn.w	r3, #7
 80050a6:	4619      	mov	r1, r3
 80050a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80050aa:	f7fd f9eb 	bl	8002484 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80050ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050b0:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80050b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	4293      	cmp	r3, r2
 80050b8:	bf28      	it	cs
 80050ba:	4613      	movcs	r3, r2
 80050bc:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80050be:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80050c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050c8:	f7fd f948 	bl	800235c <disk_write>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <f_mkfs+0x6f2>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e0d0      	b.n	8005278 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 80050d6:	8b7b      	ldrh	r3, [r7, #26]
 80050d8:	461a      	mov	r2, r3
 80050da:	2100      	movs	r1, #0
 80050dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80050de:	f7fd fa1e 	bl	800251e <mem_set>
				sect += n; nsect -= n;
 80050e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050e6:	4413      	add	r3, r2
 80050e8:	667b      	str	r3, [r7, #100]	; 0x64
 80050ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80050f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1dc      	bne.n	80050b2 <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80050f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fa:	3301      	adds	r3, #1
 80050fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80050fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005102:	429a      	cmp	r2, r3
 8005104:	d3af      	bcc.n	8005066 <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8005106:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800510a:	2b03      	cmp	r3, #3
 800510c:	d10e      	bne.n	800512c <f_mkfs+0x748>
 800510e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005110:	e00d      	b.n	800512e <f_mkfs+0x74a>
 8005112:	bf00      	nop
 8005114:	080053cc 	.word	0x080053cc
 8005118:	080053d8 	.word	0x080053d8
 800511c:	080053ec 	.word	0x080053ec
 8005120:	41615252 	.word	0x41615252
 8005124:	61417272 	.word	0x61417272
 8005128:	00fffff8 	.word	0x00fffff8
 800512c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512e:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8005130:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	4293      	cmp	r3, r2
 8005136:	bf28      	it	cs
 8005138:	4613      	movcs	r3, r2
 800513a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800513c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8005140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005142:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005144:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005146:	f7fd f909 	bl	800235c <disk_write>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <f_mkfs+0x770>
 8005150:	2301      	movs	r3, #1
 8005152:	e091      	b.n	8005278 <f_mkfs+0x894>
			sect += n; nsect -= n;
 8005154:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005158:	4413      	add	r3, r2
 800515a:	667b      	str	r3, [r7, #100]	; 0x64
 800515c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800515e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8005164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e2      	bne.n	8005130 <f_mkfs+0x74c>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800516a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800516e:	2b03      	cmp	r3, #3
 8005170:	d103      	bne.n	800517a <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 8005172:	230c      	movs	r3, #12
 8005174:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8005178:	e010      	b.n	800519c <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005180:	d303      	bcc.n	800518a <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8005182:	2306      	movs	r3, #6
 8005184:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8005188:	e008      	b.n	800519c <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800518a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800518e:	2b02      	cmp	r3, #2
 8005190:	d101      	bne.n	8005196 <f_mkfs+0x7b2>
 8005192:	2304      	movs	r3, #4
 8005194:	e000      	b.n	8005198 <f_mkfs+0x7b4>
 8005196:	2301      	movs	r3, #1
 8005198:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800519c:	7afb      	ldrb	r3, [r7, #11]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d15b      	bne.n	800525e <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 80051a6:	8b7b      	ldrh	r3, [r7, #26]
 80051a8:	461a      	mov	r2, r3
 80051aa:	2100      	movs	r1, #0
 80051ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051ae:	f7fd f9b6 	bl	800251e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80051b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80051b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fd f946 	bl	800244e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80051c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80051c8:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	3301      	adds	r3, #1
 80051d4:	2201      	movs	r2, #1
 80051d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	3302      	adds	r3, #2
 80051dc:	2201      	movs	r2, #1
 80051de:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	3303      	adds	r3, #3
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	3304      	adds	r3, #4
 80051ec:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80051f0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	441a      	add	r2, r3
 80051f8:	4b21      	ldr	r3, [pc, #132]	; (8005280 <f_mkfs+0x89c>)
 80051fa:	fba3 1302 	umull	r1, r3, r3, r2
 80051fe:	1ad2      	subs	r2, r2, r3
 8005200:	0852      	lsrs	r2, r2, #1
 8005202:	4413      	add	r3, r2
 8005204:	0b5b      	lsrs	r3, r3, #13
 8005206:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	3305      	adds	r3, #5
 800520c:	22fe      	movs	r2, #254	; 0xfe
 800520e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8005210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005212:	089b      	lsrs	r3, r3, #2
 8005214:	b2da      	uxtb	r2, r3
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3306      	adds	r3, #6
 800521a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3307      	adds	r3, #7
 8005226:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	3308      	adds	r3, #8
 8005230:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005232:	4618      	mov	r0, r3
 8005234:	f7fd f926 	bl	8002484 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	330c      	adds	r3, #12
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4611      	mov	r1, r2
 8005240:	4618      	mov	r0, r3
 8005242:	f7fd f91f 	bl	8002484 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8005246:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800524a:	2301      	movs	r3, #1
 800524c:	2200      	movs	r2, #0
 800524e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005250:	f7fd f884 	bl	800235c <disk_write>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <f_mkfs+0x87a>
 800525a:	2301      	movs	r3, #1
 800525c:	e00c      	b.n	8005278 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800525e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005262:	2200      	movs	r2, #0
 8005264:	2100      	movs	r1, #0
 8005266:	4618      	mov	r0, r3
 8005268:	f7fd f898 	bl	800239c <disk_ioctl>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <f_mkfs+0x892>
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <f_mkfs+0x894>

	return FR_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3774      	adds	r7, #116	; 0x74
 800527c:	46bd      	mov	sp, r7
 800527e:	bd90      	pop	{r4, r7, pc}
 8005280:	0515565b 	.word	0x0515565b

08005284 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	4613      	mov	r3, r2
 8005290:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005296:	2300      	movs	r3, #0
 8005298:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800529a:	4b1f      	ldr	r3, [pc, #124]	; (8005318 <FATFS_LinkDriverEx+0x94>)
 800529c:	7a5b      	ldrb	r3, [r3, #9]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d131      	bne.n	8005308 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80052a4:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <FATFS_LinkDriverEx+0x94>)
 80052a6:	7a5b      	ldrb	r3, [r3, #9]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <FATFS_LinkDriverEx+0x94>)
 80052ae:	2100      	movs	r1, #0
 80052b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80052b2:	4b19      	ldr	r3, [pc, #100]	; (8005318 <FATFS_LinkDriverEx+0x94>)
 80052b4:	7a5b      	ldrb	r3, [r3, #9]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	4a17      	ldr	r2, [pc, #92]	; (8005318 <FATFS_LinkDriverEx+0x94>)
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80052c2:	4b15      	ldr	r3, [pc, #84]	; (8005318 <FATFS_LinkDriverEx+0x94>)
 80052c4:	7a5b      	ldrb	r3, [r3, #9]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	4b13      	ldr	r3, [pc, #76]	; (8005318 <FATFS_LinkDriverEx+0x94>)
 80052cc:	4413      	add	r3, r2
 80052ce:	79fa      	ldrb	r2, [r7, #7]
 80052d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <FATFS_LinkDriverEx+0x94>)
 80052d4:	7a5b      	ldrb	r3, [r3, #9]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	b2d1      	uxtb	r1, r2
 80052dc:	4a0e      	ldr	r2, [pc, #56]	; (8005318 <FATFS_LinkDriverEx+0x94>)
 80052de:	7251      	strb	r1, [r2, #9]
 80052e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80052e2:	7dbb      	ldrb	r3, [r7, #22]
 80052e4:	3330      	adds	r3, #48	; 0x30
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	3301      	adds	r3, #1
 80052f0:	223a      	movs	r2, #58	; 0x3a
 80052f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	3302      	adds	r3, #2
 80052f8:	222f      	movs	r2, #47	; 0x2f
 80052fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	3303      	adds	r3, #3
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005308:	7dfb      	ldrb	r3, [r7, #23]
}
 800530a:	4618      	mov	r0, r3
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20003198 	.word	0x20003198

0800531c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005326:	2200      	movs	r2, #0
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff ffaa 	bl	8005284 <FATFS_LinkDriverEx>
 8005330:	4603      	mov	r3, r0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <__libc_init_array>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	4d0d      	ldr	r5, [pc, #52]	; (8005374 <__libc_init_array+0x38>)
 8005340:	4c0d      	ldr	r4, [pc, #52]	; (8005378 <__libc_init_array+0x3c>)
 8005342:	1b64      	subs	r4, r4, r5
 8005344:	10a4      	asrs	r4, r4, #2
 8005346:	2600      	movs	r6, #0
 8005348:	42a6      	cmp	r6, r4
 800534a:	d109      	bne.n	8005360 <__libc_init_array+0x24>
 800534c:	4d0b      	ldr	r5, [pc, #44]	; (800537c <__libc_init_array+0x40>)
 800534e:	4c0c      	ldr	r4, [pc, #48]	; (8005380 <__libc_init_array+0x44>)
 8005350:	f000 f820 	bl	8005394 <_init>
 8005354:	1b64      	subs	r4, r4, r5
 8005356:	10a4      	asrs	r4, r4, #2
 8005358:	2600      	movs	r6, #0
 800535a:	42a6      	cmp	r6, r4
 800535c:	d105      	bne.n	800536a <__libc_init_array+0x2e>
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	f855 3b04 	ldr.w	r3, [r5], #4
 8005364:	4798      	blx	r3
 8005366:	3601      	adds	r6, #1
 8005368:	e7ee      	b.n	8005348 <__libc_init_array+0xc>
 800536a:	f855 3b04 	ldr.w	r3, [r5], #4
 800536e:	4798      	blx	r3
 8005370:	3601      	adds	r6, #1
 8005372:	e7f2      	b.n	800535a <__libc_init_array+0x1e>
 8005374:	080054b8 	.word	0x080054b8
 8005378:	080054b8 	.word	0x080054b8
 800537c:	080054b8 	.word	0x080054b8
 8005380:	080054bc 	.word	0x080054bc

08005384 <memset>:
 8005384:	4402      	add	r2, r0
 8005386:	4603      	mov	r3, r0
 8005388:	4293      	cmp	r3, r2
 800538a:	d100      	bne.n	800538e <memset+0xa>
 800538c:	4770      	bx	lr
 800538e:	f803 1b01 	strb.w	r1, [r3], #1
 8005392:	e7f9      	b.n	8005388 <memset+0x4>

08005394 <_init>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	bf00      	nop
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr

080053a0 <_fini>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	bf00      	nop
 80053a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a6:	bc08      	pop	{r3}
 80053a8:	469e      	mov	lr, r3
 80053aa:	4770      	bx	lr
